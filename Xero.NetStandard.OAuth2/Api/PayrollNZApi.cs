/* 
 * Xero Payroll NZ
 *
 * This is the Xero Payroll API for orgs in the NZ region.
 *
 * The version of the OpenAPI document: 2.3.0
 * Contact: api@xero.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Xero.NetStandard.OAuth2.Client;
using Xero.NetStandard.OAuth2.Model.PayrollNz;

namespace Xero.NetStandard.OAuth2.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPayrollNzApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// approve a timesheet
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="timesheetID">Identifier for the timesheet</param>
        /// <returns>Task of TimesheetObject</returns>
        System.Threading.Tasks.Task<TimesheetObject> ApproveTimesheetAsync (string accessToken, string xeroTenantId, Guid timesheetID);

        /// <summary>
        /// approve a timesheet
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="timesheetID">Identifier for the timesheet</param>
        /// <returns>Task of ApiResponse (TimesheetObject)</returns>
        System.Threading.Tasks.Task<ApiResponse<TimesheetObject>> ApproveTimesheetAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid timesheetID);
        /// <summary>
        /// create a new deduction
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="deduction"></param>
        /// <returns>Task of DeductionObject</returns>
        System.Threading.Tasks.Task<DeductionObject> CreateDeductionAsync (string accessToken, string xeroTenantId, Deduction deduction);

        /// <summary>
        /// create a new deduction
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="deduction"></param>
        /// <returns>Task of ApiResponse (DeductionObject)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeductionObject>> CreateDeductionAsyncWithHttpInfo (string accessToken, string xeroTenantId, Deduction deduction);
        /// <summary>
        /// create a new earnings rate
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="earningsRate"></param>
        /// <returns>Task of EarningsRateObject</returns>
        System.Threading.Tasks.Task<EarningsRateObject> CreateEarningsRateAsync (string accessToken, string xeroTenantId, EarningsRate earningsRate);

        /// <summary>
        /// create a new earnings rate
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="earningsRate"></param>
        /// <returns>Task of ApiResponse (EarningsRateObject)</returns>
        System.Threading.Tasks.Task<ApiResponse<EarningsRateObject>> CreateEarningsRateAsyncWithHttpInfo (string accessToken, string xeroTenantId, EarningsRate earningsRate);
        /// <summary>
        /// creates employees
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employee"></param>
        /// <returns>Task of EmployeeObject</returns>
        System.Threading.Tasks.Task<EmployeeObject> CreateEmployeeAsync (string accessToken, string xeroTenantId, Employee employee);

        /// <summary>
        /// creates employees
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employee"></param>
        /// <returns>Task of ApiResponse (EmployeeObject)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmployeeObject>> CreateEmployeeAsyncWithHttpInfo (string accessToken, string xeroTenantId, Employee employee);
        /// <summary>
        /// creates employee earnings template records
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeId">Employee id for single object</param>
        /// <param name="earningsTemplate"></param>
        /// <returns>Task of EarningsTemplateObject</returns>
        System.Threading.Tasks.Task<EarningsTemplateObject> CreateEmployeeEarningsTemplateAsync (string accessToken, string xeroTenantId, Guid employeeId, EarningsTemplate earningsTemplate);

        /// <summary>
        /// creates employee earnings template records
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeId">Employee id for single object</param>
        /// <param name="earningsTemplate"></param>
        /// <returns>Task of ApiResponse (EarningsTemplateObject)</returns>
        System.Threading.Tasks.Task<ApiResponse<EarningsTemplateObject>> CreateEmployeeEarningsTemplateAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid employeeId, EarningsTemplate earningsTemplate);
        /// <summary>
        /// creates employee leave records
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeId">Employee id for single object</param>
        /// <param name="employeeLeave"></param>
        /// <returns>Task of EmployeeLeaveObject</returns>
        System.Threading.Tasks.Task<EmployeeLeaveObject> CreateEmployeeLeaveAsync (string accessToken, string xeroTenantId, Guid employeeId, EmployeeLeave employeeLeave);

        /// <summary>
        /// creates employee leave records
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeId">Employee id for single object</param>
        /// <param name="employeeLeave"></param>
        /// <returns>Task of ApiResponse (EmployeeLeaveObject)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmployeeLeaveObject>> CreateEmployeeLeaveAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid employeeId, EmployeeLeave employeeLeave);
        /// <summary>
        /// Allows you to set-up leave for a specific employee. This is required before viewing, configuring and requesting leave for an employee
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeId">Employee id for single object</param>
        /// <param name="employeeLeaveSetup"></param>
        /// <returns>Task of EmployeeLeaveSetupObject</returns>
        System.Threading.Tasks.Task<EmployeeLeaveSetupObject> CreateEmployeeLeaveSetupAsync (string accessToken, string xeroTenantId, Guid employeeId, EmployeeLeaveSetup employeeLeaveSetup);

        /// <summary>
        /// Allows you to set-up leave for a specific employee. This is required before viewing, configuring and requesting leave for an employee
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeId">Employee id for single object</param>
        /// <param name="employeeLeaveSetup"></param>
        /// <returns>Task of ApiResponse (EmployeeLeaveSetupObject)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmployeeLeaveSetupObject>> CreateEmployeeLeaveSetupAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid employeeId, EmployeeLeaveSetup employeeLeaveSetup);
        /// <summary>
        /// creates employee leave type records
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeId">Employee id for single object</param>
        /// <param name="employeeLeaveType"></param>
        /// <returns>Task of EmployeeLeaveTypeObject</returns>
        System.Threading.Tasks.Task<EmployeeLeaveTypeObject> CreateEmployeeLeaveTypeAsync (string accessToken, string xeroTenantId, Guid employeeId, EmployeeLeaveType employeeLeaveType);

        /// <summary>
        /// creates employee leave type records
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeId">Employee id for single object</param>
        /// <param name="employeeLeaveType"></param>
        /// <returns>Task of ApiResponse (EmployeeLeaveTypeObject)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmployeeLeaveTypeObject>> CreateEmployeeLeaveTypeAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid employeeId, EmployeeLeaveType employeeLeaveType);
        /// <summary>
        /// creates employee opening balances
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeId">Employee id for single object</param>
        /// <param name="employeeOpeningBalance"></param>
        /// <returns>Task of EmployeeOpeningBalancesObject</returns>
        System.Threading.Tasks.Task<EmployeeOpeningBalancesObject> CreateEmployeeOpeningBalancesAsync (string accessToken, string xeroTenantId, Guid employeeId, List<EmployeeOpeningBalance> employeeOpeningBalance);

        /// <summary>
        /// creates employee opening balances
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeId">Employee id for single object</param>
        /// <param name="employeeOpeningBalance"></param>
        /// <returns>Task of ApiResponse (EmployeeOpeningBalancesObject)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmployeeOpeningBalancesObject>> CreateEmployeeOpeningBalancesAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid employeeId, List<EmployeeOpeningBalance> employeeOpeningBalance);
        /// <summary>
        /// creates employee payment method
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeId">Employee id for single object</param>
        /// <param name="paymentMethod"></param>
        /// <returns>Task of PaymentMethodObject</returns>
        System.Threading.Tasks.Task<PaymentMethodObject> CreateEmployeePaymentMethodAsync (string accessToken, string xeroTenantId, Guid employeeId, PaymentMethod paymentMethod);

        /// <summary>
        /// creates employee payment method
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeId">Employee id for single object</param>
        /// <param name="paymentMethod"></param>
        /// <returns>Task of ApiResponse (PaymentMethodObject)</returns>
        System.Threading.Tasks.Task<ApiResponse<PaymentMethodObject>> CreateEmployeePaymentMethodAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid employeeId, PaymentMethod paymentMethod);
        /// <summary>
        /// creates employee salary and wage record
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeId">Employee id for single object</param>
        /// <param name="salaryAndWage"></param>
        /// <returns>Task of SalaryAndWageObject</returns>
        System.Threading.Tasks.Task<SalaryAndWageObject> CreateEmployeeSalaryAndWageAsync (string accessToken, string xeroTenantId, Guid employeeId, SalaryAndWage salaryAndWage);

        /// <summary>
        /// creates employee salary and wage record
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeId">Employee id for single object</param>
        /// <param name="salaryAndWage"></param>
        /// <returns>Task of ApiResponse (SalaryAndWageObject)</returns>
        System.Threading.Tasks.Task<ApiResponse<SalaryAndWageObject>> CreateEmployeeSalaryAndWageAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid employeeId, SalaryAndWage salaryAndWage);
        /// <summary>
        /// creates employment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeId">Employee id for single object</param>
        /// <param name="employment"></param>
        /// <returns>Task of EmploymentObject</returns>
        System.Threading.Tasks.Task<EmploymentObject> CreateEmploymentAsync (string accessToken, string xeroTenantId, Guid employeeId, Employment employment);

        /// <summary>
        /// creates employment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeId">Employee id for single object</param>
        /// <param name="employment"></param>
        /// <returns>Task of ApiResponse (EmploymentObject)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmploymentObject>> CreateEmploymentAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid employeeId, Employment employment);
        /// <summary>
        /// create a new leave type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="leaveType"></param>
        /// <returns>Task of LeaveTypeObject</returns>
        System.Threading.Tasks.Task<LeaveTypeObject> CreateLeaveTypeAsync (string accessToken, string xeroTenantId, LeaveType leaveType);

        /// <summary>
        /// create a new leave type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="leaveType"></param>
        /// <returns>Task of ApiResponse (LeaveTypeObject)</returns>
        System.Threading.Tasks.Task<ApiResponse<LeaveTypeObject>> CreateLeaveTypeAsyncWithHttpInfo (string accessToken, string xeroTenantId, LeaveType leaveType);
        /// <summary>
        /// creates multiple employee earnings template records
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeId">Employee id for single object</param>
        /// <param name="earningsTemplate"></param>
        /// <returns>Task of EmployeeEarningsTemplates</returns>
        System.Threading.Tasks.Task<EmployeeEarningsTemplates> CreateMultipleEmployeeEarningsTemplateAsync (string accessToken, string xeroTenantId, Guid employeeId, List<EarningsTemplate> earningsTemplate);

        /// <summary>
        /// creates multiple employee earnings template records
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeId">Employee id for single object</param>
        /// <param name="earningsTemplate"></param>
        /// <returns>Task of ApiResponse (EmployeeEarningsTemplates)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmployeeEarningsTemplates>> CreateMultipleEmployeeEarningsTemplateAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid employeeId, List<EarningsTemplate> earningsTemplate);
        /// <summary>
        /// create a pay run
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="payRun"></param>
        /// <returns>Task of PayRunObject</returns>
        System.Threading.Tasks.Task<PayRunObject> CreatePayRunAsync (string accessToken, string xeroTenantId, PayRun payRun);

        /// <summary>
        /// create a pay run
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="payRun"></param>
        /// <returns>Task of ApiResponse (PayRunObject)</returns>
        System.Threading.Tasks.Task<ApiResponse<PayRunObject>> CreatePayRunAsyncWithHttpInfo (string accessToken, string xeroTenantId, PayRun payRun);
        /// <summary>
        /// create a new payrun calendar
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="payRunCalendar"></param>
        /// <returns>Task of PayRunCalendarObject</returns>
        System.Threading.Tasks.Task<PayRunCalendarObject> CreatePayRunCalendarAsync (string accessToken, string xeroTenantId, PayRunCalendar payRunCalendar);

        /// <summary>
        /// create a new payrun calendar
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="payRunCalendar"></param>
        /// <returns>Task of ApiResponse (PayRunCalendarObject)</returns>
        System.Threading.Tasks.Task<ApiResponse<PayRunCalendarObject>> CreatePayRunCalendarAsyncWithHttpInfo (string accessToken, string xeroTenantId, PayRunCalendar payRunCalendar);
        /// <summary>
        /// create a new reimbursement
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="reimbursement"></param>
        /// <returns>Task of ReimbursementObject</returns>
        System.Threading.Tasks.Task<ReimbursementObject> CreateReimbursementAsync (string accessToken, string xeroTenantId, Reimbursement reimbursement);

        /// <summary>
        /// create a new reimbursement
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="reimbursement"></param>
        /// <returns>Task of ApiResponse (ReimbursementObject)</returns>
        System.Threading.Tasks.Task<ApiResponse<ReimbursementObject>> CreateReimbursementAsyncWithHttpInfo (string accessToken, string xeroTenantId, Reimbursement reimbursement);
        /// <summary>
        /// create a new superannuation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="benefit"></param>
        /// <returns>Task of SuperannuationObject</returns>
        System.Threading.Tasks.Task<SuperannuationObject> CreateSuperannuationAsync (string accessToken, string xeroTenantId, Benefit benefit);

        /// <summary>
        /// create a new superannuation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="benefit"></param>
        /// <returns>Task of ApiResponse (SuperannuationObject)</returns>
        System.Threading.Tasks.Task<ApiResponse<SuperannuationObject>> CreateSuperannuationAsyncWithHttpInfo (string accessToken, string xeroTenantId, Benefit benefit);
        /// <summary>
        /// create a new timesheet
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="timesheet"></param>
        /// <returns>Task of TimesheetObject</returns>
        System.Threading.Tasks.Task<TimesheetObject> CreateTimesheetAsync (string accessToken, string xeroTenantId, Timesheet timesheet);

        /// <summary>
        /// create a new timesheet
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="timesheet"></param>
        /// <returns>Task of ApiResponse (TimesheetObject)</returns>
        System.Threading.Tasks.Task<ApiResponse<TimesheetObject>> CreateTimesheetAsyncWithHttpInfo (string accessToken, string xeroTenantId, Timesheet timesheet);
        /// <summary>
        /// create a new timesheet line
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="timesheetID">Identifier for the timesheet</param>
        /// <param name="timesheetLine"></param>
        /// <returns>Task of TimesheetLineObject</returns>
        System.Threading.Tasks.Task<TimesheetLineObject> CreateTimesheetLineAsync (string accessToken, string xeroTenantId, Guid timesheetID, TimesheetLine timesheetLine);

        /// <summary>
        /// create a new timesheet line
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="timesheetID">Identifier for the timesheet</param>
        /// <param name="timesheetLine"></param>
        /// <returns>Task of ApiResponse (TimesheetLineObject)</returns>
        System.Threading.Tasks.Task<ApiResponse<TimesheetLineObject>> CreateTimesheetLineAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid timesheetID, TimesheetLine timesheetLine);
        /// <summary>
        /// deletes an employee earnings template record
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeId">Employee id for single object</param>
        /// <param name="payTemplateEarningID">Id for single pay template earnings object</param>
        /// <returns>Task of EarningsTemplateObject</returns>
        System.Threading.Tasks.Task<EarningsTemplateObject> DeleteEmployeeEarningsTemplateAsync (string accessToken, string xeroTenantId, Guid employeeId, Guid payTemplateEarningID);

        /// <summary>
        /// deletes an employee earnings template record
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeId">Employee id for single object</param>
        /// <param name="payTemplateEarningID">Id for single pay template earnings object</param>
        /// <returns>Task of ApiResponse (EarningsTemplateObject)</returns>
        System.Threading.Tasks.Task<ApiResponse<EarningsTemplateObject>> DeleteEmployeeEarningsTemplateAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid employeeId, Guid payTemplateEarningID);
        /// <summary>
        /// deletes an employee leave record
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeId">Employee id for single object</param>
        /// <param name="leaveID">Leave id for single object</param>
        /// <returns>Task of EmployeeLeaveObject</returns>
        System.Threading.Tasks.Task<EmployeeLeaveObject> DeleteEmployeeLeaveAsync (string accessToken, string xeroTenantId, Guid employeeId, Guid leaveID);

        /// <summary>
        /// deletes an employee leave record
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeId">Employee id for single object</param>
        /// <param name="leaveID">Leave id for single object</param>
        /// <returns>Task of ApiResponse (EmployeeLeaveObject)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmployeeLeaveObject>> DeleteEmployeeLeaveAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid employeeId, Guid leaveID);
        /// <summary>
        /// deletes an employee salary and wages record
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeId">Employee id for single object</param>
        /// <param name="salaryAndWagesID">Id for single salary and wages object</param>
        /// <returns>Task of SalaryAndWageObject</returns>
        System.Threading.Tasks.Task<SalaryAndWageObject> DeleteEmployeeSalaryAndWageAsync (string accessToken, string xeroTenantId, Guid employeeId, Guid salaryAndWagesID);

        /// <summary>
        /// deletes an employee salary and wages record
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeId">Employee id for single object</param>
        /// <param name="salaryAndWagesID">Id for single salary and wages object</param>
        /// <returns>Task of ApiResponse (SalaryAndWageObject)</returns>
        System.Threading.Tasks.Task<ApiResponse<SalaryAndWageObject>> DeleteEmployeeSalaryAndWageAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid employeeId, Guid salaryAndWagesID);
        /// <summary>
        /// delete a timesheet
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="timesheetID">Identifier for the timesheet</param>
        /// <returns>Task of TimesheetLine</returns>
        System.Threading.Tasks.Task<TimesheetLine> DeleteTimesheetAsync (string accessToken, string xeroTenantId, Guid timesheetID);

        /// <summary>
        /// delete a timesheet
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="timesheetID">Identifier for the timesheet</param>
        /// <returns>Task of ApiResponse (TimesheetLine)</returns>
        System.Threading.Tasks.Task<ApiResponse<TimesheetLine>> DeleteTimesheetAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid timesheetID);
        /// <summary>
        /// delete a timesheet line
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="timesheetID">Identifier for the timesheet</param>
        /// <param name="timesheetLineID">Identifier for the timesheet line</param>
        /// <returns>Task of TimesheetLine</returns>
        System.Threading.Tasks.Task<TimesheetLine> DeleteTimesheetLineAsync (string accessToken, string xeroTenantId, Guid timesheetID, Guid timesheetLineID);

        /// <summary>
        /// delete a timesheet line
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="timesheetID">Identifier for the timesheet</param>
        /// <param name="timesheetLineID">Identifier for the timesheet line</param>
        /// <returns>Task of ApiResponse (TimesheetLine)</returns>
        System.Threading.Tasks.Task<ApiResponse<TimesheetLine>> DeleteTimesheetLineAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid timesheetID, Guid timesheetLineID);
        /// <summary>
        /// retrieve a single deduction by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="deductionId">Identifier for the deduction</param>
        /// <returns>Task of DeductionObject</returns>
        System.Threading.Tasks.Task<DeductionObject> GetDeductionAsync (string accessToken, string xeroTenantId, Guid deductionId);

        /// <summary>
        /// retrieve a single deduction by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="deductionId">Identifier for the deduction</param>
        /// <returns>Task of ApiResponse (DeductionObject)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeductionObject>> GetDeductionAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid deductionId);
        /// <summary>
        /// searches deductions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="page">Page number which specifies the set of records to retrieve. By default the number of the records per set is 100. (optional)</param>
        /// <returns>Task of Deductions</returns>
        System.Threading.Tasks.Task<Deductions> GetDeductionsAsync (string accessToken, string xeroTenantId, int? page = null);

        /// <summary>
        /// searches deductions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="page">Page number which specifies the set of records to retrieve. By default the number of the records per set is 100. (optional)</param>
        /// <returns>Task of ApiResponse (Deductions)</returns>
        System.Threading.Tasks.Task<ApiResponse<Deductions>> GetDeductionsAsyncWithHttpInfo (string accessToken, string xeroTenantId, int? page = null);
        /// <summary>
        /// retrieve a single earnings rates by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="earningsRateID">Identifier for the earnings rate</param>
        /// <returns>Task of EarningsRateObject</returns>
        System.Threading.Tasks.Task<EarningsRateObject> GetEarningsRateAsync (string accessToken, string xeroTenantId, Guid earningsRateID);

        /// <summary>
        /// retrieve a single earnings rates by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="earningsRateID">Identifier for the earnings rate</param>
        /// <returns>Task of ApiResponse (EarningsRateObject)</returns>
        System.Threading.Tasks.Task<ApiResponse<EarningsRateObject>> GetEarningsRateAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid earningsRateID);
        /// <summary>
        /// searches earnings rates
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="page">Page number which specifies the set of records to retrieve. By default the number of the records per set is 100. (optional)</param>
        /// <returns>Task of EarningsRates</returns>
        System.Threading.Tasks.Task<EarningsRates> GetEarningsRatesAsync (string accessToken, string xeroTenantId, int? page = null);

        /// <summary>
        /// searches earnings rates
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="page">Page number which specifies the set of records to retrieve. By default the number of the records per set is 100. (optional)</param>
        /// <returns>Task of ApiResponse (EarningsRates)</returns>
        System.Threading.Tasks.Task<ApiResponse<EarningsRates>> GetEarningsRatesAsyncWithHttpInfo (string accessToken, string xeroTenantId, int? page = null);
        /// <summary>
        /// searches employees
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeId">Employee id for single object</param>
        /// <returns>Task of EmployeeObject</returns>
        System.Threading.Tasks.Task<EmployeeObject> GetEmployeeAsync (string accessToken, string xeroTenantId, Guid employeeId);

        /// <summary>
        /// searches employees
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeId">Employee id for single object</param>
        /// <returns>Task of ApiResponse (EmployeeObject)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmployeeObject>> GetEmployeeAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid employeeId);
        /// <summary>
        /// search employee leave balances
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeId">Employee id for single object</param>
        /// <returns>Task of EmployeeLeaveBalances</returns>
        System.Threading.Tasks.Task<EmployeeLeaveBalances> GetEmployeeLeaveBalancesAsync (string accessToken, string xeroTenantId, Guid employeeId);

        /// <summary>
        /// search employee leave balances
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeId">Employee id for single object</param>
        /// <returns>Task of ApiResponse (EmployeeLeaveBalances)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmployeeLeaveBalances>> GetEmployeeLeaveBalancesAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid employeeId);
        /// <summary>
        /// searches employee leave periods
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeId">Employee id for single object</param>
        /// <param name="startDate">Filter by start date (optional)</param>
        /// <param name="endDate">Filter by end date (optional)</param>
        /// <returns>Task of LeavePeriods</returns>
        System.Threading.Tasks.Task<LeavePeriods> GetEmployeeLeavePeriodsAsync (string accessToken, string xeroTenantId, Guid employeeId, DateTime? startDate = null, DateTime? endDate = null);

        /// <summary>
        /// searches employee leave periods
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeId">Employee id for single object</param>
        /// <param name="startDate">Filter by start date (optional)</param>
        /// <param name="endDate">Filter by end date (optional)</param>
        /// <returns>Task of ApiResponse (LeavePeriods)</returns>
        System.Threading.Tasks.Task<ApiResponse<LeavePeriods>> GetEmployeeLeavePeriodsAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid employeeId, DateTime? startDate = null, DateTime? endDate = null);
        /// <summary>
        /// searches employee leave types
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeId">Employee id for single object</param>
        /// <returns>Task of EmployeeLeaveTypes</returns>
        System.Threading.Tasks.Task<EmployeeLeaveTypes> GetEmployeeLeaveTypesAsync (string accessToken, string xeroTenantId, Guid employeeId);

        /// <summary>
        /// searches employee leave types
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeId">Employee id for single object</param>
        /// <returns>Task of ApiResponse (EmployeeLeaveTypes)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmployeeLeaveTypes>> GetEmployeeLeaveTypesAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid employeeId);
        /// <summary>
        /// search employee leave records
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeId">Employee id for single object</param>
        /// <returns>Task of EmployeeLeaves</returns>
        System.Threading.Tasks.Task<EmployeeLeaves> GetEmployeeLeavesAsync (string accessToken, string xeroTenantId, Guid employeeId);

        /// <summary>
        /// search employee leave records
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeId">Employee id for single object</param>
        /// <returns>Task of ApiResponse (EmployeeLeaves)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmployeeLeaves>> GetEmployeeLeavesAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid employeeId);
        /// <summary>
        /// retrieve employee openingbalances
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeId">Employee id for single object</param>
        /// <returns>Task of EmployeeOpeningBalancesObject</returns>
        System.Threading.Tasks.Task<EmployeeOpeningBalancesObject> GetEmployeeOpeningBalancesAsync (string accessToken, string xeroTenantId, Guid employeeId);

        /// <summary>
        /// retrieve employee openingbalances
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeId">Employee id for single object</param>
        /// <returns>Task of ApiResponse (EmployeeOpeningBalancesObject)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmployeeOpeningBalancesObject>> GetEmployeeOpeningBalancesAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid employeeId);
        /// <summary>
        /// searches employee pay templates
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeId">Employee id for single object</param>
        /// <returns>Task of EmployeePayTemplates</returns>
        System.Threading.Tasks.Task<EmployeePayTemplates> GetEmployeePayTemplatesAsync (string accessToken, string xeroTenantId, Guid employeeId);

        /// <summary>
        /// searches employee pay templates
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeId">Employee id for single object</param>
        /// <returns>Task of ApiResponse (EmployeePayTemplates)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmployeePayTemplates>> GetEmployeePayTemplatesAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid employeeId);
        /// <summary>
        /// retrieves an employee&#39;s payment method
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeId">Employee id for single object</param>
        /// <returns>Task of PaymentMethodObject</returns>
        System.Threading.Tasks.Task<PaymentMethodObject> GetEmployeePaymentMethodAsync (string accessToken, string xeroTenantId, Guid employeeId);

        /// <summary>
        /// retrieves an employee&#39;s payment method
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeId">Employee id for single object</param>
        /// <returns>Task of ApiResponse (PaymentMethodObject)</returns>
        System.Threading.Tasks.Task<ApiResponse<PaymentMethodObject>> GetEmployeePaymentMethodAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid employeeId);
        /// <summary>
        /// get employee salary and wages record by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeId">Employee id for single object</param>
        /// <param name="salaryAndWagesID">Id for single pay template earnings object</param>
        /// <returns>Task of SalaryAndWages</returns>
        System.Threading.Tasks.Task<SalaryAndWages> GetEmployeeSalaryAndWageAsync (string accessToken, string xeroTenantId, Guid employeeId, Guid salaryAndWagesID);

        /// <summary>
        /// get employee salary and wages record by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeId">Employee id for single object</param>
        /// <param name="salaryAndWagesID">Id for single pay template earnings object</param>
        /// <returns>Task of ApiResponse (SalaryAndWages)</returns>
        System.Threading.Tasks.Task<ApiResponse<SalaryAndWages>> GetEmployeeSalaryAndWageAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid employeeId, Guid salaryAndWagesID);
        /// <summary>
        /// retrieves an employee&#39;s salary and wages
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeId">Employee id for single object</param>
        /// <param name="page">Page number which specifies the set of records to retrieve. By default the number of the records per set is 100. (optional)</param>
        /// <returns>Task of SalaryAndWages</returns>
        System.Threading.Tasks.Task<SalaryAndWages> GetEmployeeSalaryAndWagesAsync (string accessToken, string xeroTenantId, Guid employeeId, int? page = null);

        /// <summary>
        /// retrieves an employee&#39;s salary and wages
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeId">Employee id for single object</param>
        /// <param name="page">Page number which specifies the set of records to retrieve. By default the number of the records per set is 100. (optional)</param>
        /// <returns>Task of ApiResponse (SalaryAndWages)</returns>
        System.Threading.Tasks.Task<ApiResponse<SalaryAndWages>> GetEmployeeSalaryAndWagesAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid employeeId, int? page = null);
        /// <summary>
        /// searches tax records for an employee
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeId">Employee id for single object</param>
        /// <returns>Task of EmployeeTaxObject</returns>
        System.Threading.Tasks.Task<EmployeeTaxObject> GetEmployeeTaxAsync (string accessToken, string xeroTenantId, Guid employeeId);

        /// <summary>
        /// searches tax records for an employee
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeId">Employee id for single object</param>
        /// <returns>Task of ApiResponse (EmployeeTaxObject)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmployeeTaxObject>> GetEmployeeTaxAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid employeeId);
        /// <summary>
        /// searches employees
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="firstName">Filter by first name (optional)</param>
        /// <param name="lastName">Filter by last name (optional)</param>
        /// <param name="page">Page number which specifies the set of records to retrieve. By default the number of the records per set is 100. (optional)</param>
        /// <returns>Task of Employees</returns>
        System.Threading.Tasks.Task<Employees> GetEmployeesAsync (string accessToken, string xeroTenantId, string firstName = null, string lastName = null, int? page = null);

        /// <summary>
        /// searches employees
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="firstName">Filter by first name (optional)</param>
        /// <param name="lastName">Filter by last name (optional)</param>
        /// <param name="page">Page number which specifies the set of records to retrieve. By default the number of the records per set is 100. (optional)</param>
        /// <returns>Task of ApiResponse (Employees)</returns>
        System.Threading.Tasks.Task<ApiResponse<Employees>> GetEmployeesAsyncWithHttpInfo (string accessToken, string xeroTenantId, string firstName = null, string lastName = null, int? page = null);
        /// <summary>
        /// retrieve a single leave type by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="leaveTypeID">Identifier for the leave type</param>
        /// <returns>Task of LeaveTypeObject</returns>
        System.Threading.Tasks.Task<LeaveTypeObject> GetLeaveTypeAsync (string accessToken, string xeroTenantId, Guid leaveTypeID);

        /// <summary>
        /// retrieve a single leave type by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="leaveTypeID">Identifier for the leave type</param>
        /// <returns>Task of ApiResponse (LeaveTypeObject)</returns>
        System.Threading.Tasks.Task<ApiResponse<LeaveTypeObject>> GetLeaveTypeAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid leaveTypeID);
        /// <summary>
        /// searches leave types
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="page">Page number which specifies the set of records to retrieve. By default the number of the records per set is 100. (optional)</param>
        /// <param name="activeOnly">Filters leave types by active status. By default the API returns all leave types. (optional)</param>
        /// <returns>Task of LeaveTypes</returns>
        System.Threading.Tasks.Task<LeaveTypes> GetLeaveTypesAsync (string accessToken, string xeroTenantId, int? page = null, bool? activeOnly = null);

        /// <summary>
        /// searches leave types
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="page">Page number which specifies the set of records to retrieve. By default the number of the records per set is 100. (optional)</param>
        /// <param name="activeOnly">Filters leave types by active status. By default the API returns all leave types. (optional)</param>
        /// <returns>Task of ApiResponse (LeaveTypes)</returns>
        System.Threading.Tasks.Task<ApiResponse<LeaveTypes>> GetLeaveTypesAsyncWithHttpInfo (string accessToken, string xeroTenantId, int? page = null, bool? activeOnly = null);
        /// <summary>
        /// retrieve a single pay run by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="payRunID">Identifier for the pay run</param>
        /// <returns>Task of PayRunObject</returns>
        System.Threading.Tasks.Task<PayRunObject> GetPayRunAsync (string accessToken, string xeroTenantId, Guid payRunID);

        /// <summary>
        /// retrieve a single pay run by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="payRunID">Identifier for the pay run</param>
        /// <returns>Task of ApiResponse (PayRunObject)</returns>
        System.Threading.Tasks.Task<ApiResponse<PayRunObject>> GetPayRunAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid payRunID);
        /// <summary>
        /// retrieve a single payrun calendar by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="payrollCalendarID">Identifier for the payrun calendars</param>
        /// <returns>Task of PayRunCalendarObject</returns>
        System.Threading.Tasks.Task<PayRunCalendarObject> GetPayRunCalendarAsync (string accessToken, string xeroTenantId, Guid payrollCalendarID);

        /// <summary>
        /// retrieve a single payrun calendar by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="payrollCalendarID">Identifier for the payrun calendars</param>
        /// <returns>Task of ApiResponse (PayRunCalendarObject)</returns>
        System.Threading.Tasks.Task<ApiResponse<PayRunCalendarObject>> GetPayRunCalendarAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid payrollCalendarID);
        /// <summary>
        /// searches payrun calendars
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="page">Page number which specifies the set of records to retrieve. By default the number of the records per set is 100. (optional)</param>
        /// <returns>Task of PayRunCalendars</returns>
        System.Threading.Tasks.Task<PayRunCalendars> GetPayRunCalendarsAsync (string accessToken, string xeroTenantId, int? page = null);

        /// <summary>
        /// searches payrun calendars
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="page">Page number which specifies the set of records to retrieve. By default the number of the records per set is 100. (optional)</param>
        /// <returns>Task of ApiResponse (PayRunCalendars)</returns>
        System.Threading.Tasks.Task<ApiResponse<PayRunCalendars>> GetPayRunCalendarsAsyncWithHttpInfo (string accessToken, string xeroTenantId, int? page = null);
        /// <summary>
        /// searches pay runs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="page">Page number which specifies the set of records to retrieve. By default the number of the records per set is 100. (optional)</param>
        /// <param name="status">By default get payruns will return all the payruns for an organization. You can add GET https://api.xero.com/payroll.xro/2.0/payRuns?statu&#x3D;{PayRunStatus} to filter the payruns by status. (optional)</param>
        /// <returns>Task of PayRuns</returns>
        System.Threading.Tasks.Task<PayRuns> GetPayRunsAsync (string accessToken, string xeroTenantId, int? page = null, string status = null);

        /// <summary>
        /// searches pay runs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="page">Page number which specifies the set of records to retrieve. By default the number of the records per set is 100. (optional)</param>
        /// <param name="status">By default get payruns will return all the payruns for an organization. You can add GET https://api.xero.com/payroll.xro/2.0/payRuns?statu&#x3D;{PayRunStatus} to filter the payruns by status. (optional)</param>
        /// <returns>Task of ApiResponse (PayRuns)</returns>
        System.Threading.Tasks.Task<ApiResponse<PayRuns>> GetPayRunsAsyncWithHttpInfo (string accessToken, string xeroTenantId, int? page = null, string status = null);
        /// <summary>
        /// retrieve a single payslip by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="paySlipID">Identifier for the payslip</param>
        /// <returns>Task of PaySlipObject</returns>
        System.Threading.Tasks.Task<PaySlipObject> GetPaySlipAsync (string accessToken, string xeroTenantId, Guid paySlipID);

        /// <summary>
        /// retrieve a single payslip by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="paySlipID">Identifier for the payslip</param>
        /// <returns>Task of ApiResponse (PaySlipObject)</returns>
        System.Threading.Tasks.Task<ApiResponse<PaySlipObject>> GetPaySlipAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid paySlipID);
        /// <summary>
        /// searches payslips
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="payRunID">PayrunID which specifies the containing payrun of payslips to retrieve. By default, the API does not group payslips by payrun.</param>
        /// <param name="page">Page number which specifies the set of records to retrieve. By default the number of the records per set is 100. (optional)</param>
        /// <returns>Task of PaySlips</returns>
        System.Threading.Tasks.Task<PaySlips> GetPaySlipsAsync (string accessToken, string xeroTenantId, Guid payRunID, int? page = null);

        /// <summary>
        /// searches payslips
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="payRunID">PayrunID which specifies the containing payrun of payslips to retrieve. By default, the API does not group payslips by payrun.</param>
        /// <param name="page">Page number which specifies the set of records to retrieve. By default the number of the records per set is 100. (optional)</param>
        /// <returns>Task of ApiResponse (PaySlips)</returns>
        System.Threading.Tasks.Task<ApiResponse<PaySlips>> GetPaySlipsAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid payRunID, int? page = null);
        /// <summary>
        /// retrieve a single reimbursement by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="reimbursementID">Identifier for the reimbursement</param>
        /// <returns>Task of ReimbursementObject</returns>
        System.Threading.Tasks.Task<ReimbursementObject> GetReimbursementAsync (string accessToken, string xeroTenantId, Guid reimbursementID);

        /// <summary>
        /// retrieve a single reimbursement by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="reimbursementID">Identifier for the reimbursement</param>
        /// <returns>Task of ApiResponse (ReimbursementObject)</returns>
        System.Threading.Tasks.Task<ApiResponse<ReimbursementObject>> GetReimbursementAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid reimbursementID);
        /// <summary>
        /// searches reimbursements
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="page">Page number which specifies the set of records to retrieve. By default the number of the records per set is 100. (optional)</param>
        /// <returns>Task of Reimbursements</returns>
        System.Threading.Tasks.Task<Reimbursements> GetReimbursementsAsync (string accessToken, string xeroTenantId, int? page = null);

        /// <summary>
        /// searches reimbursements
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="page">Page number which specifies the set of records to retrieve. By default the number of the records per set is 100. (optional)</param>
        /// <returns>Task of ApiResponse (Reimbursements)</returns>
        System.Threading.Tasks.Task<ApiResponse<Reimbursements>> GetReimbursementsAsyncWithHttpInfo (string accessToken, string xeroTenantId, int? page = null);
        /// <summary>
        /// searches settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <returns>Task of Settings</returns>
        System.Threading.Tasks.Task<Settings> GetSettingsAsync (string accessToken, string xeroTenantId);

        /// <summary>
        /// searches settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <returns>Task of ApiResponse (Settings)</returns>
        System.Threading.Tasks.Task<ApiResponse<Settings>> GetSettingsAsyncWithHttpInfo (string accessToken, string xeroTenantId);
        /// <summary>
        /// retrieve a single statutory deduction by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="id">Identifier for the statutory deduction</param>
        /// <returns>Task of StatutoryDeductionObject</returns>
        System.Threading.Tasks.Task<StatutoryDeductionObject> GetStatutoryDeductionAsync (string accessToken, string xeroTenantId, Guid id);

        /// <summary>
        /// retrieve a single statutory deduction by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="id">Identifier for the statutory deduction</param>
        /// <returns>Task of ApiResponse (StatutoryDeductionObject)</returns>
        System.Threading.Tasks.Task<ApiResponse<StatutoryDeductionObject>> GetStatutoryDeductionAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid id);
        /// <summary>
        /// retrieve a single timesheet by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="timesheetID">Identifier for the timesheet</param>
        /// <returns>Task of TimesheetObject</returns>
        System.Threading.Tasks.Task<TimesheetObject> GetTimesheetAsync (string accessToken, string xeroTenantId, Guid timesheetID);

        /// <summary>
        /// retrieve a single timesheet by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="timesheetID">Identifier for the timesheet</param>
        /// <returns>Task of ApiResponse (TimesheetObject)</returns>
        System.Threading.Tasks.Task<ApiResponse<TimesheetObject>> GetTimesheetAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid timesheetID);
        /// <summary>
        /// searches timesheets
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="page">Page number which specifies the set of records to retrieve. By default the number of the records per set is 100. (optional)</param>
        /// <param name="employeeId">By default get Timesheets will return the timesheets for all employees in an organization. You can add GET https://…/timesheets?filter&#x3D;employeeId&#x3D;&#x3D;{EmployeeId} to get only the timesheets of a particular employee. (optional)</param>
        /// <param name="payrollCalendarId">By default get Timesheets will return all the timesheets for an organization. You can add GET https://…/timesheets?filter&#x3D;payrollCalendarId&#x3D;&#x3D;{PayrollCalendarID} to filter the timesheets by payroll calendar id (optional)</param>
        /// <returns>Task of Timesheets</returns>
        System.Threading.Tasks.Task<Timesheets> GetTimesheetsAsync (string accessToken, string xeroTenantId, int? page = null, Guid? employeeId = null, Guid? payrollCalendarId = null);

        /// <summary>
        /// searches timesheets
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="page">Page number which specifies the set of records to retrieve. By default the number of the records per set is 100. (optional)</param>
        /// <param name="employeeId">By default get Timesheets will return the timesheets for all employees in an organization. You can add GET https://…/timesheets?filter&#x3D;employeeId&#x3D;&#x3D;{EmployeeId} to get only the timesheets of a particular employee. (optional)</param>
        /// <param name="payrollCalendarId">By default get Timesheets will return all the timesheets for an organization. You can add GET https://…/timesheets?filter&#x3D;payrollCalendarId&#x3D;&#x3D;{PayrollCalendarID} to filter the timesheets by payroll calendar id (optional)</param>
        /// <returns>Task of ApiResponse (Timesheets)</returns>
        System.Threading.Tasks.Task<ApiResponse<Timesheets>> GetTimesheetsAsyncWithHttpInfo (string accessToken, string xeroTenantId, int? page = null, Guid? employeeId = null, Guid? payrollCalendarId = null);
        /// <summary>
        /// searches tracking categories
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <returns>Task of TrackingCategories</returns>
        System.Threading.Tasks.Task<TrackingCategories> GetTrackingCategoriesAsync (string accessToken, string xeroTenantId);

        /// <summary>
        /// searches tracking categories
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <returns>Task of ApiResponse (TrackingCategories)</returns>
        System.Threading.Tasks.Task<ApiResponse<TrackingCategories>> GetTrackingCategoriesAsyncWithHttpInfo (string accessToken, string xeroTenantId);
        /// <summary>
        /// revert a timesheet to draft
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="timesheetID">Identifier for the timesheet</param>
        /// <returns>Task of TimesheetObject</returns>
        System.Threading.Tasks.Task<TimesheetObject> RevertTimesheetAsync (string accessToken, string xeroTenantId, Guid timesheetID);

        /// <summary>
        /// revert a timesheet to draft
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="timesheetID">Identifier for the timesheet</param>
        /// <returns>Task of ApiResponse (TimesheetObject)</returns>
        System.Threading.Tasks.Task<ApiResponse<TimesheetObject>> RevertTimesheetAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid timesheetID);
        /// <summary>
        /// updates employee
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeId">Employee id for single object</param>
        /// <param name="employee"></param>
        /// <returns>Task of EmployeeObject</returns>
        System.Threading.Tasks.Task<EmployeeObject> UpdateEmployeeAsync (string accessToken, string xeroTenantId, Guid employeeId, Employee employee);

        /// <summary>
        /// updates employee
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeId">Employee id for single object</param>
        /// <param name="employee"></param>
        /// <returns>Task of ApiResponse (EmployeeObject)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmployeeObject>> UpdateEmployeeAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid employeeId, Employee employee);
        /// <summary>
        /// updates employee earnings template records
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeId">Employee id for single object</param>
        /// <param name="payTemplateEarningID">Id for single pay template earnings object</param>
        /// <param name="earningsTemplate"></param>
        /// <returns>Task of EarningsTemplateObject</returns>
        System.Threading.Tasks.Task<EarningsTemplateObject> UpdateEmployeeEarningsTemplateAsync (string accessToken, string xeroTenantId, Guid employeeId, Guid payTemplateEarningID, EarningsTemplate earningsTemplate);

        /// <summary>
        /// updates employee earnings template records
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeId">Employee id for single object</param>
        /// <param name="payTemplateEarningID">Id for single pay template earnings object</param>
        /// <param name="earningsTemplate"></param>
        /// <returns>Task of ApiResponse (EarningsTemplateObject)</returns>
        System.Threading.Tasks.Task<ApiResponse<EarningsTemplateObject>> UpdateEmployeeEarningsTemplateAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid employeeId, Guid payTemplateEarningID, EarningsTemplate earningsTemplate);
        /// <summary>
        /// updates employee leave records
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeId">Employee id for single object</param>
        /// <param name="leaveID">Leave id for single object</param>
        /// <param name="employeeLeave"></param>
        /// <returns>Task of EmployeeLeaveObject</returns>
        System.Threading.Tasks.Task<EmployeeLeaveObject> UpdateEmployeeLeaveAsync (string accessToken, string xeroTenantId, Guid employeeId, Guid leaveID, EmployeeLeave employeeLeave);

        /// <summary>
        /// updates employee leave records
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeId">Employee id for single object</param>
        /// <param name="leaveID">Leave id for single object</param>
        /// <param name="employeeLeave"></param>
        /// <returns>Task of ApiResponse (EmployeeLeaveObject)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmployeeLeaveObject>> UpdateEmployeeLeaveAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid employeeId, Guid leaveID, EmployeeLeave employeeLeave);
        /// <summary>
        /// updates employee salary and wages record
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeId">Employee id for single object</param>
        /// <param name="salaryAndWagesID">Id for single pay template earnings object</param>
        /// <param name="salaryAndWage"></param>
        /// <returns>Task of SalaryAndWageObject</returns>
        System.Threading.Tasks.Task<SalaryAndWageObject> UpdateEmployeeSalaryAndWageAsync (string accessToken, string xeroTenantId, Guid employeeId, Guid salaryAndWagesID, SalaryAndWage salaryAndWage);

        /// <summary>
        /// updates employee salary and wages record
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeId">Employee id for single object</param>
        /// <param name="salaryAndWagesID">Id for single pay template earnings object</param>
        /// <param name="salaryAndWage"></param>
        /// <returns>Task of ApiResponse (SalaryAndWageObject)</returns>
        System.Threading.Tasks.Task<ApiResponse<SalaryAndWageObject>> UpdateEmployeeSalaryAndWageAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid employeeId, Guid salaryAndWagesID, SalaryAndWage salaryAndWage);
        /// <summary>
        /// updates the tax records for an employee
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeId">Employee id for single object</param>
        /// <param name="employeeTax"></param>
        /// <returns>Task of EmployeeTaxObject</returns>
        System.Threading.Tasks.Task<EmployeeTaxObject> UpdateEmployeeTaxAsync (string accessToken, string xeroTenantId, Guid employeeId, EmployeeTax employeeTax);

        /// <summary>
        /// updates the tax records for an employee
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeId">Employee id for single object</param>
        /// <param name="employeeTax"></param>
        /// <returns>Task of ApiResponse (EmployeeTaxObject)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmployeeTaxObject>> UpdateEmployeeTaxAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid employeeId, EmployeeTax employeeTax);
        /// <summary>
        /// update a pay run
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="payRunID">Identifier for the pay run</param>
        /// <param name="payRun"></param>
        /// <returns>Task of PayRunObject</returns>
        System.Threading.Tasks.Task<PayRunObject> UpdatePayRunAsync (string accessToken, string xeroTenantId, Guid payRunID, PayRun payRun);

        /// <summary>
        /// update a pay run
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="payRunID">Identifier for the pay run</param>
        /// <param name="payRun"></param>
        /// <returns>Task of ApiResponse (PayRunObject)</returns>
        System.Threading.Tasks.Task<ApiResponse<PayRunObject>> UpdatePayRunAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid payRunID, PayRun payRun);
        /// <summary>
        /// creates employee pay slip
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="paySlipID">Identifier for the payslip</param>
        /// <param name="paySlip"></param>
        /// <returns>Task of PaySlipObject</returns>
        System.Threading.Tasks.Task<PaySlipObject> UpdatePaySlipLineItemsAsync (string accessToken, string xeroTenantId, Guid paySlipID, PaySlip paySlip);

        /// <summary>
        /// creates employee pay slip
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="paySlipID">Identifier for the payslip</param>
        /// <param name="paySlip"></param>
        /// <returns>Task of ApiResponse (PaySlipObject)</returns>
        System.Threading.Tasks.Task<ApiResponse<PaySlipObject>> UpdatePaySlipLineItemsAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid paySlipID, PaySlip paySlip);
        /// <summary>
        /// update a timesheet line
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="timesheetID">Identifier for the timesheet</param>
        /// <param name="timesheetLineID">Identifier for the timesheet line</param>
        /// <param name="timesheetLine"></param>
        /// <returns>Task of TimesheetLineObject</returns>
        System.Threading.Tasks.Task<TimesheetLineObject> UpdateTimesheetLineAsync (string accessToken, string xeroTenantId, Guid timesheetID, Guid timesheetLineID, TimesheetLine timesheetLine);

        /// <summary>
        /// update a timesheet line
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="timesheetID">Identifier for the timesheet</param>
        /// <param name="timesheetLineID">Identifier for the timesheet line</param>
        /// <param name="timesheetLine"></param>
        /// <returns>Task of ApiResponse (TimesheetLineObject)</returns>
        System.Threading.Tasks.Task<ApiResponse<TimesheetLineObject>> UpdateTimesheetLineAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid timesheetID, Guid timesheetLineID, TimesheetLine timesheetLine);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPayrollNzApi : IPayrollNzApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PayrollNzApi : IPayrollNzApi
    {
        private Xero.NetStandard.OAuth2.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PayrollNzApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PayrollNzApi() : this((string) null)
        {
            this.Configuration = Xero.NetStandard.OAuth2.Client.Configuration.MergeConfigurations(
                Xero.NetStandard.OAuth2.Client.GlobalConfiguration.Instance,
                new Xero.NetStandard.OAuth2.Client.Configuration { BasePath = "https://api.xero.com/payroll.xro/2.0" }
            );
            this.AsynchronousClient = new Xero.NetStandard.OAuth2.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Xero.NetStandard.OAuth2.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PayrollNzApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PayrollNzApi(String basePath)
        {
            this.Configuration = Xero.NetStandard.OAuth2.Client.Configuration.MergeConfigurations(
                Xero.NetStandard.OAuth2.Client.GlobalConfiguration.Instance,
                new Xero.NetStandard.OAuth2.Client.Configuration { BasePath = basePath }
            );
            this.AsynchronousClient = new Xero.NetStandard.OAuth2.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Xero.NetStandard.OAuth2.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PayrollNzApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PayrollNzApi(Xero.NetStandard.OAuth2.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Xero.NetStandard.OAuth2.Client.Configuration.MergeConfigurations(
                Xero.NetStandard.OAuth2.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.AsynchronousClient = new Xero.NetStandard.OAuth2.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Xero.NetStandard.OAuth2.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AccountingApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public PayrollNzApi(Xero.NetStandard.OAuth2.Client.ISynchronousClient client,Xero.NetStandard.OAuth2.Client.IAsynchronousClient asyncClient, Xero.NetStandard.OAuth2.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Xero.NetStandard.OAuth2.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Xero.NetStandard.OAuth2.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Xero.NetStandard.OAuth2.Client.IReadableConfiguration Configuration {get; set;}


        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Xero.NetStandard.OAuth2.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }


        /// <summary>
        /// approve a timesheet 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="timesheetID">Identifier for the timesheet</param>
        /// <returns>Task of TimesheetObject</returns>
        public async System.Threading.Tasks.Task<TimesheetObject> ApproveTimesheetAsync (string accessToken, string xeroTenantId, Guid timesheetID)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<TimesheetObject> localVarResponse = await ApproveTimesheetAsyncWithHttpInfo(accessToken, xeroTenantId, timesheetID);
             return localVarResponse.Data;

        }

        /// <summary>
        /// approve a timesheet 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="timesheetID">Identifier for the timesheet</param>
        /// <returns>Task of ApiResponse (TimesheetObject)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<TimesheetObject>> ApproveTimesheetAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid timesheetID)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling PayrollNzApi->ApproveTimesheet");

            // verify the required parameter 'timesheetID' is set
            if (timesheetID == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'timesheetID' when calling PayrollNzApi->ApproveTimesheet");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (timesheetID != null)
                requestOptions.PathParameters.Add("TimesheetID", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(timesheetID)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.PostAsync<TimesheetObject>("/Timesheets/{TimesheetID}/Approve", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ApproveTimesheet", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// create a new deduction 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="deduction"></param>
        /// <returns>Task of DeductionObject</returns>
        public async System.Threading.Tasks.Task<DeductionObject> CreateDeductionAsync (string accessToken, string xeroTenantId, Deduction deduction)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<DeductionObject> localVarResponse = await CreateDeductionAsyncWithHttpInfo(accessToken, xeroTenantId, deduction);
             return localVarResponse.Data;

        }

        /// <summary>
        /// create a new deduction 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="deduction"></param>
        /// <returns>Task of ApiResponse (DeductionObject)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<DeductionObject>> CreateDeductionAsyncWithHttpInfo (string accessToken, string xeroTenantId, Deduction deduction)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling PayrollNzApi->CreateDeduction");

            // verify the required parameter 'deduction' is set
            if (deduction == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'deduction' when calling PayrollNzApi->CreateDeduction");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            requestOptions.Data = deduction;

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.PostAsync<DeductionObject>("/Deductions", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("CreateDeduction", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// create a new earnings rate 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="earningsRate"></param>
        /// <returns>Task of EarningsRateObject</returns>
        public async System.Threading.Tasks.Task<EarningsRateObject> CreateEarningsRateAsync (string accessToken, string xeroTenantId, EarningsRate earningsRate)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<EarningsRateObject> localVarResponse = await CreateEarningsRateAsyncWithHttpInfo(accessToken, xeroTenantId, earningsRate);
             return localVarResponse.Data;

        }

        /// <summary>
        /// create a new earnings rate 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="earningsRate"></param>
        /// <returns>Task of ApiResponse (EarningsRateObject)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<EarningsRateObject>> CreateEarningsRateAsyncWithHttpInfo (string accessToken, string xeroTenantId, EarningsRate earningsRate)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling PayrollNzApi->CreateEarningsRate");

            // verify the required parameter 'earningsRate' is set
            if (earningsRate == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'earningsRate' when calling PayrollNzApi->CreateEarningsRate");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            requestOptions.Data = earningsRate;

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.PostAsync<EarningsRateObject>("/EarningsRates", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("CreateEarningsRate", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// creates employees 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employee"></param>
        /// <returns>Task of EmployeeObject</returns>
        public async System.Threading.Tasks.Task<EmployeeObject> CreateEmployeeAsync (string accessToken, string xeroTenantId, Employee employee)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<EmployeeObject> localVarResponse = await CreateEmployeeAsyncWithHttpInfo(accessToken, xeroTenantId, employee);
             return localVarResponse.Data;

        }

        /// <summary>
        /// creates employees 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employee"></param>
        /// <returns>Task of ApiResponse (EmployeeObject)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<EmployeeObject>> CreateEmployeeAsyncWithHttpInfo (string accessToken, string xeroTenantId, Employee employee)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling PayrollNzApi->CreateEmployee");

            // verify the required parameter 'employee' is set
            if (employee == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'employee' when calling PayrollNzApi->CreateEmployee");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            requestOptions.Data = employee;

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.PostAsync<EmployeeObject>("/Employees", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("CreateEmployee", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// creates employee earnings template records 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeId">Employee id for single object</param>
        /// <param name="earningsTemplate"></param>
        /// <returns>Task of EarningsTemplateObject</returns>
        public async System.Threading.Tasks.Task<EarningsTemplateObject> CreateEmployeeEarningsTemplateAsync (string accessToken, string xeroTenantId, Guid employeeId, EarningsTemplate earningsTemplate)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<EarningsTemplateObject> localVarResponse = await CreateEmployeeEarningsTemplateAsyncWithHttpInfo(accessToken, xeroTenantId, employeeId, earningsTemplate);
             return localVarResponse.Data;

        }

        /// <summary>
        /// creates employee earnings template records 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeId">Employee id for single object</param>
        /// <param name="earningsTemplate"></param>
        /// <returns>Task of ApiResponse (EarningsTemplateObject)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<EarningsTemplateObject>> CreateEmployeeEarningsTemplateAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid employeeId, EarningsTemplate earningsTemplate)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling PayrollNzApi->CreateEmployeeEarningsTemplate");

            // verify the required parameter 'employeeId' is set
            if (employeeId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'employeeId' when calling PayrollNzApi->CreateEmployeeEarningsTemplate");

            // verify the required parameter 'earningsTemplate' is set
            if (earningsTemplate == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'earningsTemplate' when calling PayrollNzApi->CreateEmployeeEarningsTemplate");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (employeeId != null)
                requestOptions.PathParameters.Add("EmployeeId", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(employeeId)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            requestOptions.Data = earningsTemplate;

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.PostAsync<EarningsTemplateObject>("/Employees/{EmployeeId}/PayTemplates/earnings", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("CreateEmployeeEarningsTemplate", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// creates employee leave records 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeId">Employee id for single object</param>
        /// <param name="employeeLeave"></param>
        /// <returns>Task of EmployeeLeaveObject</returns>
        public async System.Threading.Tasks.Task<EmployeeLeaveObject> CreateEmployeeLeaveAsync (string accessToken, string xeroTenantId, Guid employeeId, EmployeeLeave employeeLeave)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<EmployeeLeaveObject> localVarResponse = await CreateEmployeeLeaveAsyncWithHttpInfo(accessToken, xeroTenantId, employeeId, employeeLeave);
             return localVarResponse.Data;

        }

        /// <summary>
        /// creates employee leave records 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeId">Employee id for single object</param>
        /// <param name="employeeLeave"></param>
        /// <returns>Task of ApiResponse (EmployeeLeaveObject)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<EmployeeLeaveObject>> CreateEmployeeLeaveAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid employeeId, EmployeeLeave employeeLeave)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling PayrollNzApi->CreateEmployeeLeave");

            // verify the required parameter 'employeeId' is set
            if (employeeId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'employeeId' when calling PayrollNzApi->CreateEmployeeLeave");

            // verify the required parameter 'employeeLeave' is set
            if (employeeLeave == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'employeeLeave' when calling PayrollNzApi->CreateEmployeeLeave");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (employeeId != null)
                requestOptions.PathParameters.Add("EmployeeId", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(employeeId)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            requestOptions.Data = employeeLeave;

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.PostAsync<EmployeeLeaveObject>("/Employees/{EmployeeId}/Leave", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("CreateEmployeeLeave", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Allows you to set-up leave for a specific employee. This is required before viewing, configuring and requesting leave for an employee 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeId">Employee id for single object</param>
        /// <param name="employeeLeaveSetup"></param>
        /// <returns>Task of EmployeeLeaveSetupObject</returns>
        public async System.Threading.Tasks.Task<EmployeeLeaveSetupObject> CreateEmployeeLeaveSetupAsync (string accessToken, string xeroTenantId, Guid employeeId, EmployeeLeaveSetup employeeLeaveSetup)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<EmployeeLeaveSetupObject> localVarResponse = await CreateEmployeeLeaveSetupAsyncWithHttpInfo(accessToken, xeroTenantId, employeeId, employeeLeaveSetup);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Allows you to set-up leave for a specific employee. This is required before viewing, configuring and requesting leave for an employee 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeId">Employee id for single object</param>
        /// <param name="employeeLeaveSetup"></param>
        /// <returns>Task of ApiResponse (EmployeeLeaveSetupObject)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<EmployeeLeaveSetupObject>> CreateEmployeeLeaveSetupAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid employeeId, EmployeeLeaveSetup employeeLeaveSetup)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling PayrollNzApi->CreateEmployeeLeaveSetup");

            // verify the required parameter 'employeeId' is set
            if (employeeId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'employeeId' when calling PayrollNzApi->CreateEmployeeLeaveSetup");

            // verify the required parameter 'employeeLeaveSetup' is set
            if (employeeLeaveSetup == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'employeeLeaveSetup' when calling PayrollNzApi->CreateEmployeeLeaveSetup");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (employeeId != null)
                requestOptions.PathParameters.Add("EmployeeId", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(employeeId)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            requestOptions.Data = employeeLeaveSetup;

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.PostAsync<EmployeeLeaveSetupObject>("/Employees/{EmployeeId}/leaveSetup", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("CreateEmployeeLeaveSetup", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// creates employee leave type records 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeId">Employee id for single object</param>
        /// <param name="employeeLeaveType"></param>
        /// <returns>Task of EmployeeLeaveTypeObject</returns>
        public async System.Threading.Tasks.Task<EmployeeLeaveTypeObject> CreateEmployeeLeaveTypeAsync (string accessToken, string xeroTenantId, Guid employeeId, EmployeeLeaveType employeeLeaveType)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<EmployeeLeaveTypeObject> localVarResponse = await CreateEmployeeLeaveTypeAsyncWithHttpInfo(accessToken, xeroTenantId, employeeId, employeeLeaveType);
             return localVarResponse.Data;

        }

        /// <summary>
        /// creates employee leave type records 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeId">Employee id for single object</param>
        /// <param name="employeeLeaveType"></param>
        /// <returns>Task of ApiResponse (EmployeeLeaveTypeObject)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<EmployeeLeaveTypeObject>> CreateEmployeeLeaveTypeAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid employeeId, EmployeeLeaveType employeeLeaveType)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling PayrollNzApi->CreateEmployeeLeaveType");

            // verify the required parameter 'employeeId' is set
            if (employeeId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'employeeId' when calling PayrollNzApi->CreateEmployeeLeaveType");

            // verify the required parameter 'employeeLeaveType' is set
            if (employeeLeaveType == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'employeeLeaveType' when calling PayrollNzApi->CreateEmployeeLeaveType");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (employeeId != null)
                requestOptions.PathParameters.Add("EmployeeId", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(employeeId)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            requestOptions.Data = employeeLeaveType;

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.PostAsync<EmployeeLeaveTypeObject>("/Employees/{EmployeeId}/LeaveTypes", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("CreateEmployeeLeaveType", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// creates employee opening balances 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeId">Employee id for single object</param>
        /// <param name="employeeOpeningBalance"></param>
        /// <returns>Task of EmployeeOpeningBalancesObject</returns>
        public async System.Threading.Tasks.Task<EmployeeOpeningBalancesObject> CreateEmployeeOpeningBalancesAsync (string accessToken, string xeroTenantId, Guid employeeId, List<EmployeeOpeningBalance> employeeOpeningBalance)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<EmployeeOpeningBalancesObject> localVarResponse = await CreateEmployeeOpeningBalancesAsyncWithHttpInfo(accessToken, xeroTenantId, employeeId, employeeOpeningBalance);
             return localVarResponse.Data;

        }

        /// <summary>
        /// creates employee opening balances 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeId">Employee id for single object</param>
        /// <param name="employeeOpeningBalance"></param>
        /// <returns>Task of ApiResponse (EmployeeOpeningBalancesObject)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<EmployeeOpeningBalancesObject>> CreateEmployeeOpeningBalancesAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid employeeId, List<EmployeeOpeningBalance> employeeOpeningBalance)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling PayrollNzApi->CreateEmployeeOpeningBalances");

            // verify the required parameter 'employeeId' is set
            if (employeeId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'employeeId' when calling PayrollNzApi->CreateEmployeeOpeningBalances");

            // verify the required parameter 'employeeOpeningBalance' is set
            if (employeeOpeningBalance == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'employeeOpeningBalance' when calling PayrollNzApi->CreateEmployeeOpeningBalances");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (employeeId != null)
                requestOptions.PathParameters.Add("EmployeeId", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(employeeId)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            requestOptions.Data = employeeOpeningBalance;

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.PostAsync<EmployeeOpeningBalancesObject>("/Employees/{EmployeeId}/openingBalances", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("CreateEmployeeOpeningBalances", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// creates employee payment method 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeId">Employee id for single object</param>
        /// <param name="paymentMethod"></param>
        /// <returns>Task of PaymentMethodObject</returns>
        public async System.Threading.Tasks.Task<PaymentMethodObject> CreateEmployeePaymentMethodAsync (string accessToken, string xeroTenantId, Guid employeeId, PaymentMethod paymentMethod)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<PaymentMethodObject> localVarResponse = await CreateEmployeePaymentMethodAsyncWithHttpInfo(accessToken, xeroTenantId, employeeId, paymentMethod);
             return localVarResponse.Data;

        }

        /// <summary>
        /// creates employee payment method 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeId">Employee id for single object</param>
        /// <param name="paymentMethod"></param>
        /// <returns>Task of ApiResponse (PaymentMethodObject)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<PaymentMethodObject>> CreateEmployeePaymentMethodAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid employeeId, PaymentMethod paymentMethod)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling PayrollNzApi->CreateEmployeePaymentMethod");

            // verify the required parameter 'employeeId' is set
            if (employeeId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'employeeId' when calling PayrollNzApi->CreateEmployeePaymentMethod");

            // verify the required parameter 'paymentMethod' is set
            if (paymentMethod == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'paymentMethod' when calling PayrollNzApi->CreateEmployeePaymentMethod");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (employeeId != null)
                requestOptions.PathParameters.Add("EmployeeId", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(employeeId)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            requestOptions.Data = paymentMethod;

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.PostAsync<PaymentMethodObject>("/Employees/{EmployeeId}/PaymentMethods", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("CreateEmployeePaymentMethod", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// creates employee salary and wage record 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeId">Employee id for single object</param>
        /// <param name="salaryAndWage"></param>
        /// <returns>Task of SalaryAndWageObject</returns>
        public async System.Threading.Tasks.Task<SalaryAndWageObject> CreateEmployeeSalaryAndWageAsync (string accessToken, string xeroTenantId, Guid employeeId, SalaryAndWage salaryAndWage)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<SalaryAndWageObject> localVarResponse = await CreateEmployeeSalaryAndWageAsyncWithHttpInfo(accessToken, xeroTenantId, employeeId, salaryAndWage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// creates employee salary and wage record 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeId">Employee id for single object</param>
        /// <param name="salaryAndWage"></param>
        /// <returns>Task of ApiResponse (SalaryAndWageObject)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<SalaryAndWageObject>> CreateEmployeeSalaryAndWageAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid employeeId, SalaryAndWage salaryAndWage)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling PayrollNzApi->CreateEmployeeSalaryAndWage");

            // verify the required parameter 'employeeId' is set
            if (employeeId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'employeeId' when calling PayrollNzApi->CreateEmployeeSalaryAndWage");

            // verify the required parameter 'salaryAndWage' is set
            if (salaryAndWage == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'salaryAndWage' when calling PayrollNzApi->CreateEmployeeSalaryAndWage");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (employeeId != null)
                requestOptions.PathParameters.Add("EmployeeId", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(employeeId)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            requestOptions.Data = salaryAndWage;

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.PostAsync<SalaryAndWageObject>("/Employees/{EmployeeId}/SalaryAndWages", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("CreateEmployeeSalaryAndWage", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// creates employment 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeId">Employee id for single object</param>
        /// <param name="employment"></param>
        /// <returns>Task of EmploymentObject</returns>
        public async System.Threading.Tasks.Task<EmploymentObject> CreateEmploymentAsync (string accessToken, string xeroTenantId, Guid employeeId, Employment employment)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<EmploymentObject> localVarResponse = await CreateEmploymentAsyncWithHttpInfo(accessToken, xeroTenantId, employeeId, employment);
             return localVarResponse.Data;

        }

        /// <summary>
        /// creates employment 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeId">Employee id for single object</param>
        /// <param name="employment"></param>
        /// <returns>Task of ApiResponse (EmploymentObject)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<EmploymentObject>> CreateEmploymentAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid employeeId, Employment employment)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling PayrollNzApi->CreateEmployment");

            // verify the required parameter 'employeeId' is set
            if (employeeId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'employeeId' when calling PayrollNzApi->CreateEmployment");

            // verify the required parameter 'employment' is set
            if (employment == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'employment' when calling PayrollNzApi->CreateEmployment");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (employeeId != null)
                requestOptions.PathParameters.Add("EmployeeId", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(employeeId)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            requestOptions.Data = employment;

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.PostAsync<EmploymentObject>("/Employees/{EmployeeId}/Employment", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("CreateEmployment", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// create a new leave type 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="leaveType"></param>
        /// <returns>Task of LeaveTypeObject</returns>
        public async System.Threading.Tasks.Task<LeaveTypeObject> CreateLeaveTypeAsync (string accessToken, string xeroTenantId, LeaveType leaveType)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<LeaveTypeObject> localVarResponse = await CreateLeaveTypeAsyncWithHttpInfo(accessToken, xeroTenantId, leaveType);
             return localVarResponse.Data;

        }

        /// <summary>
        /// create a new leave type 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="leaveType"></param>
        /// <returns>Task of ApiResponse (LeaveTypeObject)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<LeaveTypeObject>> CreateLeaveTypeAsyncWithHttpInfo (string accessToken, string xeroTenantId, LeaveType leaveType)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling PayrollNzApi->CreateLeaveType");

            // verify the required parameter 'leaveType' is set
            if (leaveType == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'leaveType' when calling PayrollNzApi->CreateLeaveType");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            requestOptions.Data = leaveType;

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.PostAsync<LeaveTypeObject>("/LeaveTypes", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("CreateLeaveType", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// creates multiple employee earnings template records 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeId">Employee id for single object</param>
        /// <param name="earningsTemplate"></param>
        /// <returns>Task of EmployeeEarningsTemplates</returns>
        public async System.Threading.Tasks.Task<EmployeeEarningsTemplates> CreateMultipleEmployeeEarningsTemplateAsync (string accessToken, string xeroTenantId, Guid employeeId, List<EarningsTemplate> earningsTemplate)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<EmployeeEarningsTemplates> localVarResponse = await CreateMultipleEmployeeEarningsTemplateAsyncWithHttpInfo(accessToken, xeroTenantId, employeeId, earningsTemplate);
             return localVarResponse.Data;

        }

        /// <summary>
        /// creates multiple employee earnings template records 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeId">Employee id for single object</param>
        /// <param name="earningsTemplate"></param>
        /// <returns>Task of ApiResponse (EmployeeEarningsTemplates)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<EmployeeEarningsTemplates>> CreateMultipleEmployeeEarningsTemplateAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid employeeId, List<EarningsTemplate> earningsTemplate)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling PayrollNzApi->CreateMultipleEmployeeEarningsTemplate");

            // verify the required parameter 'employeeId' is set
            if (employeeId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'employeeId' when calling PayrollNzApi->CreateMultipleEmployeeEarningsTemplate");

            // verify the required parameter 'earningsTemplate' is set
            if (earningsTemplate == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'earningsTemplate' when calling PayrollNzApi->CreateMultipleEmployeeEarningsTemplate");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (employeeId != null)
                requestOptions.PathParameters.Add("EmployeeId", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(employeeId)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            requestOptions.Data = earningsTemplate;

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.PostAsync<EmployeeEarningsTemplates>("/Employees/{EmployeeId}/paytemplateearnings", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("CreateMultipleEmployeeEarningsTemplate", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// create a pay run 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="payRun"></param>
        /// <returns>Task of PayRunObject</returns>
        public async System.Threading.Tasks.Task<PayRunObject> CreatePayRunAsync (string accessToken, string xeroTenantId, PayRun payRun)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<PayRunObject> localVarResponse = await CreatePayRunAsyncWithHttpInfo(accessToken, xeroTenantId, payRun);
             return localVarResponse.Data;

        }

        /// <summary>
        /// create a pay run 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="payRun"></param>
        /// <returns>Task of ApiResponse (PayRunObject)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<PayRunObject>> CreatePayRunAsyncWithHttpInfo (string accessToken, string xeroTenantId, PayRun payRun)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling PayrollNzApi->CreatePayRun");

            // verify the required parameter 'payRun' is set
            if (payRun == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'payRun' when calling PayrollNzApi->CreatePayRun");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            requestOptions.Data = payRun;

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.PostAsync<PayRunObject>("/PayRuns", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("CreatePayRun", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// create a new payrun calendar 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="payRunCalendar"></param>
        /// <returns>Task of PayRunCalendarObject</returns>
        public async System.Threading.Tasks.Task<PayRunCalendarObject> CreatePayRunCalendarAsync (string accessToken, string xeroTenantId, PayRunCalendar payRunCalendar)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<PayRunCalendarObject> localVarResponse = await CreatePayRunCalendarAsyncWithHttpInfo(accessToken, xeroTenantId, payRunCalendar);
             return localVarResponse.Data;

        }

        /// <summary>
        /// create a new payrun calendar 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="payRunCalendar"></param>
        /// <returns>Task of ApiResponse (PayRunCalendarObject)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<PayRunCalendarObject>> CreatePayRunCalendarAsyncWithHttpInfo (string accessToken, string xeroTenantId, PayRunCalendar payRunCalendar)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling PayrollNzApi->CreatePayRunCalendar");

            // verify the required parameter 'payRunCalendar' is set
            if (payRunCalendar == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'payRunCalendar' when calling PayrollNzApi->CreatePayRunCalendar");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            requestOptions.Data = payRunCalendar;

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.PostAsync<PayRunCalendarObject>("/PayRunCalendars", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("CreatePayRunCalendar", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// create a new reimbursement 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="reimbursement"></param>
        /// <returns>Task of ReimbursementObject</returns>
        public async System.Threading.Tasks.Task<ReimbursementObject> CreateReimbursementAsync (string accessToken, string xeroTenantId, Reimbursement reimbursement)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<ReimbursementObject> localVarResponse = await CreateReimbursementAsyncWithHttpInfo(accessToken, xeroTenantId, reimbursement);
             return localVarResponse.Data;

        }

        /// <summary>
        /// create a new reimbursement 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="reimbursement"></param>
        /// <returns>Task of ApiResponse (ReimbursementObject)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<ReimbursementObject>> CreateReimbursementAsyncWithHttpInfo (string accessToken, string xeroTenantId, Reimbursement reimbursement)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling PayrollNzApi->CreateReimbursement");

            // verify the required parameter 'reimbursement' is set
            if (reimbursement == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'reimbursement' when calling PayrollNzApi->CreateReimbursement");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            requestOptions.Data = reimbursement;

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.PostAsync<ReimbursementObject>("/Reimbursements", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("CreateReimbursement", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// create a new superannuation 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="benefit"></param>
        /// <returns>Task of SuperannuationObject</returns>
        public async System.Threading.Tasks.Task<SuperannuationObject> CreateSuperannuationAsync (string accessToken, string xeroTenantId, Benefit benefit)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<SuperannuationObject> localVarResponse = await CreateSuperannuationAsyncWithHttpInfo(accessToken, xeroTenantId, benefit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// create a new superannuation 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="benefit"></param>
        /// <returns>Task of ApiResponse (SuperannuationObject)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<SuperannuationObject>> CreateSuperannuationAsyncWithHttpInfo (string accessToken, string xeroTenantId, Benefit benefit)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling PayrollNzApi->CreateSuperannuation");

            // verify the required parameter 'benefit' is set
            if (benefit == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'benefit' when calling PayrollNzApi->CreateSuperannuation");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            requestOptions.Data = benefit;

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.PostAsync<SuperannuationObject>("/superannuations", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("CreateSuperannuation", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// create a new timesheet 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="timesheet"></param>
        /// <returns>Task of TimesheetObject</returns>
        public async System.Threading.Tasks.Task<TimesheetObject> CreateTimesheetAsync (string accessToken, string xeroTenantId, Timesheet timesheet)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<TimesheetObject> localVarResponse = await CreateTimesheetAsyncWithHttpInfo(accessToken, xeroTenantId, timesheet);
             return localVarResponse.Data;

        }

        /// <summary>
        /// create a new timesheet 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="timesheet"></param>
        /// <returns>Task of ApiResponse (TimesheetObject)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<TimesheetObject>> CreateTimesheetAsyncWithHttpInfo (string accessToken, string xeroTenantId, Timesheet timesheet)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling PayrollNzApi->CreateTimesheet");

            // verify the required parameter 'timesheet' is set
            if (timesheet == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'timesheet' when calling PayrollNzApi->CreateTimesheet");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            requestOptions.Data = timesheet;

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.PostAsync<TimesheetObject>("/Timesheets", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("CreateTimesheet", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// create a new timesheet line 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="timesheetID">Identifier for the timesheet</param>
        /// <param name="timesheetLine"></param>
        /// <returns>Task of TimesheetLineObject</returns>
        public async System.Threading.Tasks.Task<TimesheetLineObject> CreateTimesheetLineAsync (string accessToken, string xeroTenantId, Guid timesheetID, TimesheetLine timesheetLine)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<TimesheetLineObject> localVarResponse = await CreateTimesheetLineAsyncWithHttpInfo(accessToken, xeroTenantId, timesheetID, timesheetLine);
             return localVarResponse.Data;

        }

        /// <summary>
        /// create a new timesheet line 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="timesheetID">Identifier for the timesheet</param>
        /// <param name="timesheetLine"></param>
        /// <returns>Task of ApiResponse (TimesheetLineObject)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<TimesheetLineObject>> CreateTimesheetLineAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid timesheetID, TimesheetLine timesheetLine)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling PayrollNzApi->CreateTimesheetLine");

            // verify the required parameter 'timesheetID' is set
            if (timesheetID == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'timesheetID' when calling PayrollNzApi->CreateTimesheetLine");

            // verify the required parameter 'timesheetLine' is set
            if (timesheetLine == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'timesheetLine' when calling PayrollNzApi->CreateTimesheetLine");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (timesheetID != null)
                requestOptions.PathParameters.Add("TimesheetID", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(timesheetID)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            requestOptions.Data = timesheetLine;

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.PostAsync<TimesheetLineObject>("/Timesheets/{TimesheetID}/Lines", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("CreateTimesheetLine", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// deletes an employee earnings template record 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeId">Employee id for single object</param>
        /// <param name="payTemplateEarningID">Id for single pay template earnings object</param>
        /// <returns>Task of EarningsTemplateObject</returns>
        public async System.Threading.Tasks.Task<EarningsTemplateObject> DeleteEmployeeEarningsTemplateAsync (string accessToken, string xeroTenantId, Guid employeeId, Guid payTemplateEarningID)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<EarningsTemplateObject> localVarResponse = await DeleteEmployeeEarningsTemplateAsyncWithHttpInfo(accessToken, xeroTenantId, employeeId, payTemplateEarningID);
             return localVarResponse.Data;

        }

        /// <summary>
        /// deletes an employee earnings template record 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeId">Employee id for single object</param>
        /// <param name="payTemplateEarningID">Id for single pay template earnings object</param>
        /// <returns>Task of ApiResponse (EarningsTemplateObject)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<EarningsTemplateObject>> DeleteEmployeeEarningsTemplateAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid employeeId, Guid payTemplateEarningID)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling PayrollNzApi->DeleteEmployeeEarningsTemplate");

            // verify the required parameter 'employeeId' is set
            if (employeeId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'employeeId' when calling PayrollNzApi->DeleteEmployeeEarningsTemplate");

            // verify the required parameter 'payTemplateEarningID' is set
            if (payTemplateEarningID == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'payTemplateEarningID' when calling PayrollNzApi->DeleteEmployeeEarningsTemplate");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (employeeId != null)
                requestOptions.PathParameters.Add("EmployeeId", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(employeeId)); // path parameter
            if (payTemplateEarningID != null)
                requestOptions.PathParameters.Add("PayTemplateEarningID", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(payTemplateEarningID)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.DeleteAsync<EarningsTemplateObject>("/Employees/{EmployeeId}/PayTemplates/earnings/{PayTemplateEarningID}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("DeleteEmployeeEarningsTemplate", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// deletes an employee leave record 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeId">Employee id for single object</param>
        /// <param name="leaveID">Leave id for single object</param>
        /// <returns>Task of EmployeeLeaveObject</returns>
        public async System.Threading.Tasks.Task<EmployeeLeaveObject> DeleteEmployeeLeaveAsync (string accessToken, string xeroTenantId, Guid employeeId, Guid leaveID)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<EmployeeLeaveObject> localVarResponse = await DeleteEmployeeLeaveAsyncWithHttpInfo(accessToken, xeroTenantId, employeeId, leaveID);
             return localVarResponse.Data;

        }

        /// <summary>
        /// deletes an employee leave record 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeId">Employee id for single object</param>
        /// <param name="leaveID">Leave id for single object</param>
        /// <returns>Task of ApiResponse (EmployeeLeaveObject)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<EmployeeLeaveObject>> DeleteEmployeeLeaveAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid employeeId, Guid leaveID)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling PayrollNzApi->DeleteEmployeeLeave");

            // verify the required parameter 'employeeId' is set
            if (employeeId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'employeeId' when calling PayrollNzApi->DeleteEmployeeLeave");

            // verify the required parameter 'leaveID' is set
            if (leaveID == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'leaveID' when calling PayrollNzApi->DeleteEmployeeLeave");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (employeeId != null)
                requestOptions.PathParameters.Add("EmployeeId", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(employeeId)); // path parameter
            if (leaveID != null)
                requestOptions.PathParameters.Add("LeaveID", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(leaveID)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.DeleteAsync<EmployeeLeaveObject>("/Employees/{EmployeeId}/Leave/{LeaveID}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("DeleteEmployeeLeave", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// deletes an employee salary and wages record 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeId">Employee id for single object</param>
        /// <param name="salaryAndWagesID">Id for single salary and wages object</param>
        /// <returns>Task of SalaryAndWageObject</returns>
        public async System.Threading.Tasks.Task<SalaryAndWageObject> DeleteEmployeeSalaryAndWageAsync (string accessToken, string xeroTenantId, Guid employeeId, Guid salaryAndWagesID)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<SalaryAndWageObject> localVarResponse = await DeleteEmployeeSalaryAndWageAsyncWithHttpInfo(accessToken, xeroTenantId, employeeId, salaryAndWagesID);
             return localVarResponse.Data;

        }

        /// <summary>
        /// deletes an employee salary and wages record 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeId">Employee id for single object</param>
        /// <param name="salaryAndWagesID">Id for single salary and wages object</param>
        /// <returns>Task of ApiResponse (SalaryAndWageObject)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<SalaryAndWageObject>> DeleteEmployeeSalaryAndWageAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid employeeId, Guid salaryAndWagesID)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling PayrollNzApi->DeleteEmployeeSalaryAndWage");

            // verify the required parameter 'employeeId' is set
            if (employeeId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'employeeId' when calling PayrollNzApi->DeleteEmployeeSalaryAndWage");

            // verify the required parameter 'salaryAndWagesID' is set
            if (salaryAndWagesID == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'salaryAndWagesID' when calling PayrollNzApi->DeleteEmployeeSalaryAndWage");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (employeeId != null)
                requestOptions.PathParameters.Add("EmployeeId", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(employeeId)); // path parameter
            if (salaryAndWagesID != null)
                requestOptions.PathParameters.Add("SalaryAndWagesID", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(salaryAndWagesID)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.DeleteAsync<SalaryAndWageObject>("/Employees/{EmployeeId}/SalaryAndWages/{SalaryAndWagesID}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("DeleteEmployeeSalaryAndWage", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// delete a timesheet 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="timesheetID">Identifier for the timesheet</param>
        /// <returns>Task of TimesheetLine</returns>
        public async System.Threading.Tasks.Task<TimesheetLine> DeleteTimesheetAsync (string accessToken, string xeroTenantId, Guid timesheetID)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<TimesheetLine> localVarResponse = await DeleteTimesheetAsyncWithHttpInfo(accessToken, xeroTenantId, timesheetID);
             return localVarResponse.Data;

        }

        /// <summary>
        /// delete a timesheet 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="timesheetID">Identifier for the timesheet</param>
        /// <returns>Task of ApiResponse (TimesheetLine)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<TimesheetLine>> DeleteTimesheetAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid timesheetID)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling PayrollNzApi->DeleteTimesheet");

            // verify the required parameter 'timesheetID' is set
            if (timesheetID == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'timesheetID' when calling PayrollNzApi->DeleteTimesheet");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (timesheetID != null)
                requestOptions.PathParameters.Add("TimesheetID", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(timesheetID)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.DeleteAsync<TimesheetLine>("/Timesheets/{TimesheetID}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("DeleteTimesheet", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// delete a timesheet line 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="timesheetID">Identifier for the timesheet</param>
        /// <param name="timesheetLineID">Identifier for the timesheet line</param>
        /// <returns>Task of TimesheetLine</returns>
        public async System.Threading.Tasks.Task<TimesheetLine> DeleteTimesheetLineAsync (string accessToken, string xeroTenantId, Guid timesheetID, Guid timesheetLineID)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<TimesheetLine> localVarResponse = await DeleteTimesheetLineAsyncWithHttpInfo(accessToken, xeroTenantId, timesheetID, timesheetLineID);
             return localVarResponse.Data;

        }

        /// <summary>
        /// delete a timesheet line 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="timesheetID">Identifier for the timesheet</param>
        /// <param name="timesheetLineID">Identifier for the timesheet line</param>
        /// <returns>Task of ApiResponse (TimesheetLine)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<TimesheetLine>> DeleteTimesheetLineAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid timesheetID, Guid timesheetLineID)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling PayrollNzApi->DeleteTimesheetLine");

            // verify the required parameter 'timesheetID' is set
            if (timesheetID == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'timesheetID' when calling PayrollNzApi->DeleteTimesheetLine");

            // verify the required parameter 'timesheetLineID' is set
            if (timesheetLineID == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'timesheetLineID' when calling PayrollNzApi->DeleteTimesheetLine");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (timesheetID != null)
                requestOptions.PathParameters.Add("TimesheetID", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(timesheetID)); // path parameter
            if (timesheetLineID != null)
                requestOptions.PathParameters.Add("TimesheetLineID", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(timesheetLineID)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.DeleteAsync<TimesheetLine>("/Timesheets/{TimesheetID}/Lines/{TimesheetLineID}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("DeleteTimesheetLine", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// retrieve a single deduction by id 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="deductionId">Identifier for the deduction</param>
        /// <returns>Task of DeductionObject</returns>
        public async System.Threading.Tasks.Task<DeductionObject> GetDeductionAsync (string accessToken, string xeroTenantId, Guid deductionId)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<DeductionObject> localVarResponse = await GetDeductionAsyncWithHttpInfo(accessToken, xeroTenantId, deductionId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// retrieve a single deduction by id 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="deductionId">Identifier for the deduction</param>
        /// <returns>Task of ApiResponse (DeductionObject)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<DeductionObject>> GetDeductionAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid deductionId)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling PayrollNzApi->GetDeduction");

            // verify the required parameter 'deductionId' is set
            if (deductionId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'deductionId' when calling PayrollNzApi->GetDeduction");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (deductionId != null)
                requestOptions.PathParameters.Add("deductionId", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(deductionId)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.GetAsync<DeductionObject>("/Deductions/{deductionId}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetDeduction", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// searches deductions 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="page">Page number which specifies the set of records to retrieve. By default the number of the records per set is 100. (optional)</param>
        /// <returns>Task of Deductions</returns>
        public async System.Threading.Tasks.Task<Deductions> GetDeductionsAsync (string accessToken, string xeroTenantId, int? page = null)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<Deductions> localVarResponse = await GetDeductionsAsyncWithHttpInfo(accessToken, xeroTenantId, page);
             return localVarResponse.Data;

        }

        /// <summary>
        /// searches deductions 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="page">Page number which specifies the set of records to retrieve. By default the number of the records per set is 100. (optional)</param>
        /// <returns>Task of ApiResponse (Deductions)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<Deductions>> GetDeductionsAsyncWithHttpInfo (string accessToken, string xeroTenantId, int? page = null)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling PayrollNzApi->GetDeductions");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            

            if (page != null)
            {
                foreach (var kvp in Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToMultiMap("", "page", page))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.GetAsync<Deductions>("/Deductions", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetDeductions", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// retrieve a single earnings rates by id 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="earningsRateID">Identifier for the earnings rate</param>
        /// <returns>Task of EarningsRateObject</returns>
        public async System.Threading.Tasks.Task<EarningsRateObject> GetEarningsRateAsync (string accessToken, string xeroTenantId, Guid earningsRateID)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<EarningsRateObject> localVarResponse = await GetEarningsRateAsyncWithHttpInfo(accessToken, xeroTenantId, earningsRateID);
             return localVarResponse.Data;

        }

        /// <summary>
        /// retrieve a single earnings rates by id 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="earningsRateID">Identifier for the earnings rate</param>
        /// <returns>Task of ApiResponse (EarningsRateObject)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<EarningsRateObject>> GetEarningsRateAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid earningsRateID)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling PayrollNzApi->GetEarningsRate");

            // verify the required parameter 'earningsRateID' is set
            if (earningsRateID == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'earningsRateID' when calling PayrollNzApi->GetEarningsRate");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (earningsRateID != null)
                requestOptions.PathParameters.Add("EarningsRateID", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(earningsRateID)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.GetAsync<EarningsRateObject>("/EarningsRates/{EarningsRateID}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetEarningsRate", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// searches earnings rates 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="page">Page number which specifies the set of records to retrieve. By default the number of the records per set is 100. (optional)</param>
        /// <returns>Task of EarningsRates</returns>
        public async System.Threading.Tasks.Task<EarningsRates> GetEarningsRatesAsync (string accessToken, string xeroTenantId, int? page = null)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<EarningsRates> localVarResponse = await GetEarningsRatesAsyncWithHttpInfo(accessToken, xeroTenantId, page);
             return localVarResponse.Data;

        }

        /// <summary>
        /// searches earnings rates 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="page">Page number which specifies the set of records to retrieve. By default the number of the records per set is 100. (optional)</param>
        /// <returns>Task of ApiResponse (EarningsRates)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<EarningsRates>> GetEarningsRatesAsyncWithHttpInfo (string accessToken, string xeroTenantId, int? page = null)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling PayrollNzApi->GetEarningsRates");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            

            if (page != null)
            {
                foreach (var kvp in Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToMultiMap("", "page", page))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.GetAsync<EarningsRates>("/EarningsRates", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetEarningsRates", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// searches employees 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeId">Employee id for single object</param>
        /// <returns>Task of EmployeeObject</returns>
        public async System.Threading.Tasks.Task<EmployeeObject> GetEmployeeAsync (string accessToken, string xeroTenantId, Guid employeeId)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<EmployeeObject> localVarResponse = await GetEmployeeAsyncWithHttpInfo(accessToken, xeroTenantId, employeeId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// searches employees 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeId">Employee id for single object</param>
        /// <returns>Task of ApiResponse (EmployeeObject)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<EmployeeObject>> GetEmployeeAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid employeeId)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling PayrollNzApi->GetEmployee");

            // verify the required parameter 'employeeId' is set
            if (employeeId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'employeeId' when calling PayrollNzApi->GetEmployee");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (employeeId != null)
                requestOptions.PathParameters.Add("EmployeeId", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(employeeId)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.GetAsync<EmployeeObject>("/Employees/{EmployeeId}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetEmployee", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// search employee leave balances 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeId">Employee id for single object</param>
        /// <returns>Task of EmployeeLeaveBalances</returns>
        public async System.Threading.Tasks.Task<EmployeeLeaveBalances> GetEmployeeLeaveBalancesAsync (string accessToken, string xeroTenantId, Guid employeeId)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<EmployeeLeaveBalances> localVarResponse = await GetEmployeeLeaveBalancesAsyncWithHttpInfo(accessToken, xeroTenantId, employeeId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// search employee leave balances 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeId">Employee id for single object</param>
        /// <returns>Task of ApiResponse (EmployeeLeaveBalances)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<EmployeeLeaveBalances>> GetEmployeeLeaveBalancesAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid employeeId)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling PayrollNzApi->GetEmployeeLeaveBalances");

            // verify the required parameter 'employeeId' is set
            if (employeeId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'employeeId' when calling PayrollNzApi->GetEmployeeLeaveBalances");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (employeeId != null)
                requestOptions.PathParameters.Add("EmployeeId", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(employeeId)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.GetAsync<EmployeeLeaveBalances>("/Employees/{EmployeeId}/LeaveBalances", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetEmployeeLeaveBalances", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// searches employee leave periods 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeId">Employee id for single object</param>
        /// <param name="startDate">Filter by start date (optional)</param>
        /// <param name="endDate">Filter by end date (optional)</param>
        /// <returns>Task of LeavePeriods</returns>
        public async System.Threading.Tasks.Task<LeavePeriods> GetEmployeeLeavePeriodsAsync (string accessToken, string xeroTenantId, Guid employeeId, DateTime? startDate = null, DateTime? endDate = null)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<LeavePeriods> localVarResponse = await GetEmployeeLeavePeriodsAsyncWithHttpInfo(accessToken, xeroTenantId, employeeId, startDate, endDate);
             return localVarResponse.Data;

        }

        /// <summary>
        /// searches employee leave periods 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeId">Employee id for single object</param>
        /// <param name="startDate">Filter by start date (optional)</param>
        /// <param name="endDate">Filter by end date (optional)</param>
        /// <returns>Task of ApiResponse (LeavePeriods)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<LeavePeriods>> GetEmployeeLeavePeriodsAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid employeeId, DateTime? startDate = null, DateTime? endDate = null)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling PayrollNzApi->GetEmployeeLeavePeriods");

            // verify the required parameter 'employeeId' is set
            if (employeeId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'employeeId' when calling PayrollNzApi->GetEmployeeLeavePeriods");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (employeeId != null)
                requestOptions.PathParameters.Add("EmployeeId", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(employeeId)); // path parameter

            if (startDate != null)
            {
                foreach (var kvp in Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToMultiMap("", "startDate", startDate))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            if (endDate != null)
            {
                foreach (var kvp in Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToMultiMap("", "endDate", endDate))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.GetAsync<LeavePeriods>("/Employees/{EmployeeId}/LeavePeriods", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetEmployeeLeavePeriods", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// searches employee leave types 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeId">Employee id for single object</param>
        /// <returns>Task of EmployeeLeaveTypes</returns>
        public async System.Threading.Tasks.Task<EmployeeLeaveTypes> GetEmployeeLeaveTypesAsync (string accessToken, string xeroTenantId, Guid employeeId)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<EmployeeLeaveTypes> localVarResponse = await GetEmployeeLeaveTypesAsyncWithHttpInfo(accessToken, xeroTenantId, employeeId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// searches employee leave types 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeId">Employee id for single object</param>
        /// <returns>Task of ApiResponse (EmployeeLeaveTypes)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<EmployeeLeaveTypes>> GetEmployeeLeaveTypesAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid employeeId)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling PayrollNzApi->GetEmployeeLeaveTypes");

            // verify the required parameter 'employeeId' is set
            if (employeeId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'employeeId' when calling PayrollNzApi->GetEmployeeLeaveTypes");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (employeeId != null)
                requestOptions.PathParameters.Add("EmployeeId", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(employeeId)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.GetAsync<EmployeeLeaveTypes>("/Employees/{EmployeeId}/LeaveTypes", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetEmployeeLeaveTypes", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// search employee leave records 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeId">Employee id for single object</param>
        /// <returns>Task of EmployeeLeaves</returns>
        public async System.Threading.Tasks.Task<EmployeeLeaves> GetEmployeeLeavesAsync (string accessToken, string xeroTenantId, Guid employeeId)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<EmployeeLeaves> localVarResponse = await GetEmployeeLeavesAsyncWithHttpInfo(accessToken, xeroTenantId, employeeId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// search employee leave records 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeId">Employee id for single object</param>
        /// <returns>Task of ApiResponse (EmployeeLeaves)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<EmployeeLeaves>> GetEmployeeLeavesAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid employeeId)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling PayrollNzApi->GetEmployeeLeaves");

            // verify the required parameter 'employeeId' is set
            if (employeeId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'employeeId' when calling PayrollNzApi->GetEmployeeLeaves");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (employeeId != null)
                requestOptions.PathParameters.Add("EmployeeId", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(employeeId)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.GetAsync<EmployeeLeaves>("/Employees/{EmployeeId}/Leave", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetEmployeeLeaves", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// retrieve employee openingbalances 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeId">Employee id for single object</param>
        /// <returns>Task of EmployeeOpeningBalancesObject</returns>
        public async System.Threading.Tasks.Task<EmployeeOpeningBalancesObject> GetEmployeeOpeningBalancesAsync (string accessToken, string xeroTenantId, Guid employeeId)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<EmployeeOpeningBalancesObject> localVarResponse = await GetEmployeeOpeningBalancesAsyncWithHttpInfo(accessToken, xeroTenantId, employeeId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// retrieve employee openingbalances 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeId">Employee id for single object</param>
        /// <returns>Task of ApiResponse (EmployeeOpeningBalancesObject)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<EmployeeOpeningBalancesObject>> GetEmployeeOpeningBalancesAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid employeeId)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling PayrollNzApi->GetEmployeeOpeningBalances");

            // verify the required parameter 'employeeId' is set
            if (employeeId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'employeeId' when calling PayrollNzApi->GetEmployeeOpeningBalances");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (employeeId != null)
                requestOptions.PathParameters.Add("EmployeeId", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(employeeId)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.GetAsync<EmployeeOpeningBalancesObject>("/Employees/{EmployeeId}/openingBalances", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetEmployeeOpeningBalances", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// searches employee pay templates 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeId">Employee id for single object</param>
        /// <returns>Task of EmployeePayTemplates</returns>
        public async System.Threading.Tasks.Task<EmployeePayTemplates> GetEmployeePayTemplatesAsync (string accessToken, string xeroTenantId, Guid employeeId)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<EmployeePayTemplates> localVarResponse = await GetEmployeePayTemplatesAsyncWithHttpInfo(accessToken, xeroTenantId, employeeId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// searches employee pay templates 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeId">Employee id for single object</param>
        /// <returns>Task of ApiResponse (EmployeePayTemplates)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<EmployeePayTemplates>> GetEmployeePayTemplatesAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid employeeId)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling PayrollNzApi->GetEmployeePayTemplates");

            // verify the required parameter 'employeeId' is set
            if (employeeId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'employeeId' when calling PayrollNzApi->GetEmployeePayTemplates");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (employeeId != null)
                requestOptions.PathParameters.Add("EmployeeId", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(employeeId)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.GetAsync<EmployeePayTemplates>("/Employees/{EmployeeId}/PayTemplates", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetEmployeePayTemplates", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// retrieves an employee&#39;s payment method 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeId">Employee id for single object</param>
        /// <returns>Task of PaymentMethodObject</returns>
        public async System.Threading.Tasks.Task<PaymentMethodObject> GetEmployeePaymentMethodAsync (string accessToken, string xeroTenantId, Guid employeeId)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<PaymentMethodObject> localVarResponse = await GetEmployeePaymentMethodAsyncWithHttpInfo(accessToken, xeroTenantId, employeeId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// retrieves an employee&#39;s payment method 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeId">Employee id for single object</param>
        /// <returns>Task of ApiResponse (PaymentMethodObject)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<PaymentMethodObject>> GetEmployeePaymentMethodAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid employeeId)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling PayrollNzApi->GetEmployeePaymentMethod");

            // verify the required parameter 'employeeId' is set
            if (employeeId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'employeeId' when calling PayrollNzApi->GetEmployeePaymentMethod");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (employeeId != null)
                requestOptions.PathParameters.Add("EmployeeId", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(employeeId)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.GetAsync<PaymentMethodObject>("/Employees/{EmployeeId}/PaymentMethods", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetEmployeePaymentMethod", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// get employee salary and wages record by id 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeId">Employee id for single object</param>
        /// <param name="salaryAndWagesID">Id for single pay template earnings object</param>
        /// <returns>Task of SalaryAndWages</returns>
        public async System.Threading.Tasks.Task<SalaryAndWages> GetEmployeeSalaryAndWageAsync (string accessToken, string xeroTenantId, Guid employeeId, Guid salaryAndWagesID)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<SalaryAndWages> localVarResponse = await GetEmployeeSalaryAndWageAsyncWithHttpInfo(accessToken, xeroTenantId, employeeId, salaryAndWagesID);
             return localVarResponse.Data;

        }

        /// <summary>
        /// get employee salary and wages record by id 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeId">Employee id for single object</param>
        /// <param name="salaryAndWagesID">Id for single pay template earnings object</param>
        /// <returns>Task of ApiResponse (SalaryAndWages)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<SalaryAndWages>> GetEmployeeSalaryAndWageAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid employeeId, Guid salaryAndWagesID)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling PayrollNzApi->GetEmployeeSalaryAndWage");

            // verify the required parameter 'employeeId' is set
            if (employeeId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'employeeId' when calling PayrollNzApi->GetEmployeeSalaryAndWage");

            // verify the required parameter 'salaryAndWagesID' is set
            if (salaryAndWagesID == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'salaryAndWagesID' when calling PayrollNzApi->GetEmployeeSalaryAndWage");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (employeeId != null)
                requestOptions.PathParameters.Add("EmployeeId", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(employeeId)); // path parameter
            if (salaryAndWagesID != null)
                requestOptions.PathParameters.Add("SalaryAndWagesID", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(salaryAndWagesID)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.GetAsync<SalaryAndWages>("/Employees/{EmployeeId}/SalaryAndWages/{SalaryAndWagesID}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetEmployeeSalaryAndWage", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// retrieves an employee&#39;s salary and wages 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeId">Employee id for single object</param>
        /// <param name="page">Page number which specifies the set of records to retrieve. By default the number of the records per set is 100. (optional)</param>
        /// <returns>Task of SalaryAndWages</returns>
        public async System.Threading.Tasks.Task<SalaryAndWages> GetEmployeeSalaryAndWagesAsync (string accessToken, string xeroTenantId, Guid employeeId, int? page = null)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<SalaryAndWages> localVarResponse = await GetEmployeeSalaryAndWagesAsyncWithHttpInfo(accessToken, xeroTenantId, employeeId, page);
             return localVarResponse.Data;

        }

        /// <summary>
        /// retrieves an employee&#39;s salary and wages 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeId">Employee id for single object</param>
        /// <param name="page">Page number which specifies the set of records to retrieve. By default the number of the records per set is 100. (optional)</param>
        /// <returns>Task of ApiResponse (SalaryAndWages)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<SalaryAndWages>> GetEmployeeSalaryAndWagesAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid employeeId, int? page = null)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling PayrollNzApi->GetEmployeeSalaryAndWages");

            // verify the required parameter 'employeeId' is set
            if (employeeId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'employeeId' when calling PayrollNzApi->GetEmployeeSalaryAndWages");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (employeeId != null)
                requestOptions.PathParameters.Add("EmployeeId", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(employeeId)); // path parameter

            if (page != null)
            {
                foreach (var kvp in Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToMultiMap("", "page", page))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.GetAsync<SalaryAndWages>("/Employees/{EmployeeId}/SalaryAndWages", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetEmployeeSalaryAndWages", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// searches tax records for an employee 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeId">Employee id for single object</param>
        /// <returns>Task of EmployeeTaxObject</returns>
        public async System.Threading.Tasks.Task<EmployeeTaxObject> GetEmployeeTaxAsync (string accessToken, string xeroTenantId, Guid employeeId)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<EmployeeTaxObject> localVarResponse = await GetEmployeeTaxAsyncWithHttpInfo(accessToken, xeroTenantId, employeeId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// searches tax records for an employee 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeId">Employee id for single object</param>
        /// <returns>Task of ApiResponse (EmployeeTaxObject)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<EmployeeTaxObject>> GetEmployeeTaxAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid employeeId)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling PayrollNzApi->GetEmployeeTax");

            // verify the required parameter 'employeeId' is set
            if (employeeId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'employeeId' when calling PayrollNzApi->GetEmployeeTax");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (employeeId != null)
                requestOptions.PathParameters.Add("EmployeeId", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(employeeId)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.GetAsync<EmployeeTaxObject>("/Employees/{EmployeeId}/Tax", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetEmployeeTax", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// searches employees 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="firstName">Filter by first name (optional)</param>
        /// <param name="lastName">Filter by last name (optional)</param>
        /// <param name="page">Page number which specifies the set of records to retrieve. By default the number of the records per set is 100. (optional)</param>
        /// <returns>Task of Employees</returns>
        public async System.Threading.Tasks.Task<Employees> GetEmployeesAsync (string accessToken, string xeroTenantId, string firstName = null, string lastName = null, int? page = null)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<Employees> localVarResponse = await GetEmployeesAsyncWithHttpInfo(accessToken, xeroTenantId, firstName, lastName, page);
             return localVarResponse.Data;

        }

        /// <summary>
        /// searches employees 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="firstName">Filter by first name (optional)</param>
        /// <param name="lastName">Filter by last name (optional)</param>
        /// <param name="page">Page number which specifies the set of records to retrieve. By default the number of the records per set is 100. (optional)</param>
        /// <returns>Task of ApiResponse (Employees)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<Employees>> GetEmployeesAsyncWithHttpInfo (string accessToken, string xeroTenantId, string firstName = null, string lastName = null, int? page = null)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling PayrollNzApi->GetEmployees");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            

            if (firstName != null)
            {
                foreach (var kvp in Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToMultiMap("", "firstName", firstName))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            if (lastName != null)
            {
                foreach (var kvp in Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToMultiMap("", "lastName", lastName))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            if (page != null)
            {
                foreach (var kvp in Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToMultiMap("", "page", page))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.GetAsync<Employees>("/Employees", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetEmployees", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// retrieve a single leave type by id 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="leaveTypeID">Identifier for the leave type</param>
        /// <returns>Task of LeaveTypeObject</returns>
        public async System.Threading.Tasks.Task<LeaveTypeObject> GetLeaveTypeAsync (string accessToken, string xeroTenantId, Guid leaveTypeID)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<LeaveTypeObject> localVarResponse = await GetLeaveTypeAsyncWithHttpInfo(accessToken, xeroTenantId, leaveTypeID);
             return localVarResponse.Data;

        }

        /// <summary>
        /// retrieve a single leave type by id 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="leaveTypeID">Identifier for the leave type</param>
        /// <returns>Task of ApiResponse (LeaveTypeObject)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<LeaveTypeObject>> GetLeaveTypeAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid leaveTypeID)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling PayrollNzApi->GetLeaveType");

            // verify the required parameter 'leaveTypeID' is set
            if (leaveTypeID == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'leaveTypeID' when calling PayrollNzApi->GetLeaveType");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (leaveTypeID != null)
                requestOptions.PathParameters.Add("LeaveTypeID", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(leaveTypeID)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.GetAsync<LeaveTypeObject>("/LeaveTypes/{LeaveTypeID}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetLeaveType", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// searches leave types 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="page">Page number which specifies the set of records to retrieve. By default the number of the records per set is 100. (optional)</param>
        /// <param name="activeOnly">Filters leave types by active status. By default the API returns all leave types. (optional)</param>
        /// <returns>Task of LeaveTypes</returns>
        public async System.Threading.Tasks.Task<LeaveTypes> GetLeaveTypesAsync (string accessToken, string xeroTenantId, int? page = null, bool? activeOnly = null)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<LeaveTypes> localVarResponse = await GetLeaveTypesAsyncWithHttpInfo(accessToken, xeroTenantId, page, activeOnly);
             return localVarResponse.Data;

        }

        /// <summary>
        /// searches leave types 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="page">Page number which specifies the set of records to retrieve. By default the number of the records per set is 100. (optional)</param>
        /// <param name="activeOnly">Filters leave types by active status. By default the API returns all leave types. (optional)</param>
        /// <returns>Task of ApiResponse (LeaveTypes)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<LeaveTypes>> GetLeaveTypesAsyncWithHttpInfo (string accessToken, string xeroTenantId, int? page = null, bool? activeOnly = null)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling PayrollNzApi->GetLeaveTypes");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            

            if (page != null)
            {
                foreach (var kvp in Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToMultiMap("", "page", page))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            if (activeOnly != null)
            {
              requestOptions.QueryParameters.Add("ActiveOnly", activeOnly.ToString());
            }

            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.GetAsync<LeaveTypes>("/LeaveTypes", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetLeaveTypes", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// retrieve a single pay run by id 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="payRunID">Identifier for the pay run</param>
        /// <returns>Task of PayRunObject</returns>
        public async System.Threading.Tasks.Task<PayRunObject> GetPayRunAsync (string accessToken, string xeroTenantId, Guid payRunID)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<PayRunObject> localVarResponse = await GetPayRunAsyncWithHttpInfo(accessToken, xeroTenantId, payRunID);
             return localVarResponse.Data;

        }

        /// <summary>
        /// retrieve a single pay run by id 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="payRunID">Identifier for the pay run</param>
        /// <returns>Task of ApiResponse (PayRunObject)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<PayRunObject>> GetPayRunAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid payRunID)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling PayrollNzApi->GetPayRun");

            // verify the required parameter 'payRunID' is set
            if (payRunID == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'payRunID' when calling PayrollNzApi->GetPayRun");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (payRunID != null)
                requestOptions.PathParameters.Add("PayRunID", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(payRunID)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.GetAsync<PayRunObject>("/PayRuns/{PayRunID}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetPayRun", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// retrieve a single payrun calendar by id 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="payrollCalendarID">Identifier for the payrun calendars</param>
        /// <returns>Task of PayRunCalendarObject</returns>
        public async System.Threading.Tasks.Task<PayRunCalendarObject> GetPayRunCalendarAsync (string accessToken, string xeroTenantId, Guid payrollCalendarID)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<PayRunCalendarObject> localVarResponse = await GetPayRunCalendarAsyncWithHttpInfo(accessToken, xeroTenantId, payrollCalendarID);
             return localVarResponse.Data;

        }

        /// <summary>
        /// retrieve a single payrun calendar by id 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="payrollCalendarID">Identifier for the payrun calendars</param>
        /// <returns>Task of ApiResponse (PayRunCalendarObject)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<PayRunCalendarObject>> GetPayRunCalendarAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid payrollCalendarID)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling PayrollNzApi->GetPayRunCalendar");

            // verify the required parameter 'payrollCalendarID' is set
            if (payrollCalendarID == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'payrollCalendarID' when calling PayrollNzApi->GetPayRunCalendar");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (payrollCalendarID != null)
                requestOptions.PathParameters.Add("PayrollCalendarID", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(payrollCalendarID)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.GetAsync<PayRunCalendarObject>("/PayRunCalendars/{PayrollCalendarID}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetPayRunCalendar", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// searches payrun calendars 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="page">Page number which specifies the set of records to retrieve. By default the number of the records per set is 100. (optional)</param>
        /// <returns>Task of PayRunCalendars</returns>
        public async System.Threading.Tasks.Task<PayRunCalendars> GetPayRunCalendarsAsync (string accessToken, string xeroTenantId, int? page = null)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<PayRunCalendars> localVarResponse = await GetPayRunCalendarsAsyncWithHttpInfo(accessToken, xeroTenantId, page);
             return localVarResponse.Data;

        }

        /// <summary>
        /// searches payrun calendars 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="page">Page number which specifies the set of records to retrieve. By default the number of the records per set is 100. (optional)</param>
        /// <returns>Task of ApiResponse (PayRunCalendars)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<PayRunCalendars>> GetPayRunCalendarsAsyncWithHttpInfo (string accessToken, string xeroTenantId, int? page = null)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling PayrollNzApi->GetPayRunCalendars");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            

            if (page != null)
            {
                foreach (var kvp in Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToMultiMap("", "page", page))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.GetAsync<PayRunCalendars>("/PayRunCalendars", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetPayRunCalendars", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// searches pay runs 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="page">Page number which specifies the set of records to retrieve. By default the number of the records per set is 100. (optional)</param>
        /// <param name="status">By default get payruns will return all the payruns for an organization. You can add GET https://api.xero.com/payroll.xro/2.0/payRuns?statu&#x3D;{PayRunStatus} to filter the payruns by status. (optional)</param>
        /// <returns>Task of PayRuns</returns>
        public async System.Threading.Tasks.Task<PayRuns> GetPayRunsAsync (string accessToken, string xeroTenantId, int? page = null, string status = null)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<PayRuns> localVarResponse = await GetPayRunsAsyncWithHttpInfo(accessToken, xeroTenantId, page, status);
             return localVarResponse.Data;

        }

        /// <summary>
        /// searches pay runs 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="page">Page number which specifies the set of records to retrieve. By default the number of the records per set is 100. (optional)</param>
        /// <param name="status">By default get payruns will return all the payruns for an organization. You can add GET https://api.xero.com/payroll.xro/2.0/payRuns?statu&#x3D;{PayRunStatus} to filter the payruns by status. (optional)</param>
        /// <returns>Task of ApiResponse (PayRuns)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<PayRuns>> GetPayRunsAsyncWithHttpInfo (string accessToken, string xeroTenantId, int? page = null, string status = null)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling PayrollNzApi->GetPayRuns");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            

            if (page != null)
            {
                foreach (var kvp in Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToMultiMap("", "page", page))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            if (status != null)
            {
                foreach (var kvp in Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToMultiMap("", "status", status))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.GetAsync<PayRuns>("/PayRuns", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetPayRuns", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// retrieve a single payslip by id 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="paySlipID">Identifier for the payslip</param>
        /// <returns>Task of PaySlipObject</returns>
        public async System.Threading.Tasks.Task<PaySlipObject> GetPaySlipAsync (string accessToken, string xeroTenantId, Guid paySlipID)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<PaySlipObject> localVarResponse = await GetPaySlipAsyncWithHttpInfo(accessToken, xeroTenantId, paySlipID);
             return localVarResponse.Data;

        }

        /// <summary>
        /// retrieve a single payslip by id 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="paySlipID">Identifier for the payslip</param>
        /// <returns>Task of ApiResponse (PaySlipObject)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<PaySlipObject>> GetPaySlipAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid paySlipID)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling PayrollNzApi->GetPaySlip");

            // verify the required parameter 'paySlipID' is set
            if (paySlipID == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'paySlipID' when calling PayrollNzApi->GetPaySlip");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (paySlipID != null)
                requestOptions.PathParameters.Add("PaySlipID", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(paySlipID)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.GetAsync<PaySlipObject>("/PaySlips/{PaySlipID}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetPaySlip", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// searches payslips 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="payRunID">PayrunID which specifies the containing payrun of payslips to retrieve. By default, the API does not group payslips by payrun.</param>
        /// <param name="page">Page number which specifies the set of records to retrieve. By default the number of the records per set is 100. (optional)</param>
        /// <returns>Task of PaySlips</returns>
        public async System.Threading.Tasks.Task<PaySlips> GetPaySlipsAsync (string accessToken, string xeroTenantId, Guid payRunID, int? page = null)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<PaySlips> localVarResponse = await GetPaySlipsAsyncWithHttpInfo(accessToken, xeroTenantId, payRunID, page);
             return localVarResponse.Data;

        }

        /// <summary>
        /// searches payslips 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="payRunID">PayrunID which specifies the containing payrun of payslips to retrieve. By default, the API does not group payslips by payrun.</param>
        /// <param name="page">Page number which specifies the set of records to retrieve. By default the number of the records per set is 100. (optional)</param>
        /// <returns>Task of ApiResponse (PaySlips)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<PaySlips>> GetPaySlipsAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid payRunID, int? page = null)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling PayrollNzApi->GetPaySlips");

            // verify the required parameter 'payRunID' is set
            if (payRunID == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'payRunID' when calling PayrollNzApi->GetPaySlips");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            

            if (page != null)
            {
                foreach (var kvp in Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToMultiMap("", "page", page))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            if (payRunID != null)
            {
                foreach (var kvp in Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToMultiMap("", "PayRunID", payRunID))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.GetAsync<PaySlips>("/PaySlips", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetPaySlips", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// retrieve a single reimbursement by id 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="reimbursementID">Identifier for the reimbursement</param>
        /// <returns>Task of ReimbursementObject</returns>
        public async System.Threading.Tasks.Task<ReimbursementObject> GetReimbursementAsync (string accessToken, string xeroTenantId, Guid reimbursementID)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<ReimbursementObject> localVarResponse = await GetReimbursementAsyncWithHttpInfo(accessToken, xeroTenantId, reimbursementID);
             return localVarResponse.Data;

        }

        /// <summary>
        /// retrieve a single reimbursement by id 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="reimbursementID">Identifier for the reimbursement</param>
        /// <returns>Task of ApiResponse (ReimbursementObject)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<ReimbursementObject>> GetReimbursementAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid reimbursementID)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling PayrollNzApi->GetReimbursement");

            // verify the required parameter 'reimbursementID' is set
            if (reimbursementID == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'reimbursementID' when calling PayrollNzApi->GetReimbursement");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (reimbursementID != null)
                requestOptions.PathParameters.Add("ReimbursementID", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(reimbursementID)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.GetAsync<ReimbursementObject>("/Reimbursements/{ReimbursementID}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetReimbursement", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// searches reimbursements 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="page">Page number which specifies the set of records to retrieve. By default the number of the records per set is 100. (optional)</param>
        /// <returns>Task of Reimbursements</returns>
        public async System.Threading.Tasks.Task<Reimbursements> GetReimbursementsAsync (string accessToken, string xeroTenantId, int? page = null)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<Reimbursements> localVarResponse = await GetReimbursementsAsyncWithHttpInfo(accessToken, xeroTenantId, page);
             return localVarResponse.Data;

        }

        /// <summary>
        /// searches reimbursements 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="page">Page number which specifies the set of records to retrieve. By default the number of the records per set is 100. (optional)</param>
        /// <returns>Task of ApiResponse (Reimbursements)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<Reimbursements>> GetReimbursementsAsyncWithHttpInfo (string accessToken, string xeroTenantId, int? page = null)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling PayrollNzApi->GetReimbursements");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            

            if (page != null)
            {
                foreach (var kvp in Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToMultiMap("", "page", page))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.GetAsync<Reimbursements>("/Reimbursements", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetReimbursements", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// searches settings 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <returns>Task of Settings</returns>
        public async System.Threading.Tasks.Task<Settings> GetSettingsAsync (string accessToken, string xeroTenantId)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<Settings> localVarResponse = await GetSettingsAsyncWithHttpInfo(accessToken, xeroTenantId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// searches settings 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <returns>Task of ApiResponse (Settings)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<Settings>> GetSettingsAsyncWithHttpInfo (string accessToken, string xeroTenantId)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling PayrollNzApi->GetSettings");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.GetAsync<Settings>("/Settings", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetSettings", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// retrieve a single statutory deduction by id 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="id">Identifier for the statutory deduction</param>
        /// <returns>Task of StatutoryDeductionObject</returns>
        public async System.Threading.Tasks.Task<StatutoryDeductionObject> GetStatutoryDeductionAsync (string accessToken, string xeroTenantId, Guid id)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<StatutoryDeductionObject> localVarResponse = await GetStatutoryDeductionAsyncWithHttpInfo(accessToken, xeroTenantId, id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// retrieve a single statutory deduction by id 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="id">Identifier for the statutory deduction</param>
        /// <returns>Task of ApiResponse (StatutoryDeductionObject)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<StatutoryDeductionObject>> GetStatutoryDeductionAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid id)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling PayrollNzApi->GetStatutoryDeduction");

            // verify the required parameter 'id' is set
            if (id == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'id' when calling PayrollNzApi->GetStatutoryDeduction");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (id != null)
                requestOptions.PathParameters.Add("Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.GetAsync<StatutoryDeductionObject>("/StatutoryDeductions/{Id}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetStatutoryDeduction", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// retrieve a single timesheet by id 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="timesheetID">Identifier for the timesheet</param>
        /// <returns>Task of TimesheetObject</returns>
        public async System.Threading.Tasks.Task<TimesheetObject> GetTimesheetAsync (string accessToken, string xeroTenantId, Guid timesheetID)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<TimesheetObject> localVarResponse = await GetTimesheetAsyncWithHttpInfo(accessToken, xeroTenantId, timesheetID);
             return localVarResponse.Data;

        }

        /// <summary>
        /// retrieve a single timesheet by id 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="timesheetID">Identifier for the timesheet</param>
        /// <returns>Task of ApiResponse (TimesheetObject)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<TimesheetObject>> GetTimesheetAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid timesheetID)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling PayrollNzApi->GetTimesheet");

            // verify the required parameter 'timesheetID' is set
            if (timesheetID == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'timesheetID' when calling PayrollNzApi->GetTimesheet");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (timesheetID != null)
                requestOptions.PathParameters.Add("TimesheetID", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(timesheetID)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.GetAsync<TimesheetObject>("/Timesheets/{TimesheetID}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetTimesheet", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// searches timesheets 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="page">Page number which specifies the set of records to retrieve. By default the number of the records per set is 100. (optional)</param>
        /// <param name="employeeId">By default get Timesheets will return the timesheets for all employees in an organization. You can add GET https://…/timesheets?filter&#x3D;employeeId&#x3D;&#x3D;{EmployeeId} to get only the timesheets of a particular employee. (optional)</param>
        /// <param name="payrollCalendarId">By default get Timesheets will return all the timesheets for an organization. You can add GET https://…/timesheets?filter&#x3D;payrollCalendarId&#x3D;&#x3D;{PayrollCalendarID} to filter the timesheets by payroll calendar id (optional)</param>
        /// <returns>Task of Timesheets</returns>
        public async System.Threading.Tasks.Task<Timesheets> GetTimesheetsAsync (string accessToken, string xeroTenantId, int? page = null, Guid? employeeId = null, Guid? payrollCalendarId = null)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<Timesheets> localVarResponse = await GetTimesheetsAsyncWithHttpInfo(accessToken, xeroTenantId, page, employeeId, payrollCalendarId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// searches timesheets 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="page">Page number which specifies the set of records to retrieve. By default the number of the records per set is 100. (optional)</param>
        /// <param name="employeeId">By default get Timesheets will return the timesheets for all employees in an organization. You can add GET https://…/timesheets?filter&#x3D;employeeId&#x3D;&#x3D;{EmployeeId} to get only the timesheets of a particular employee. (optional)</param>
        /// <param name="payrollCalendarId">By default get Timesheets will return all the timesheets for an organization. You can add GET https://…/timesheets?filter&#x3D;payrollCalendarId&#x3D;&#x3D;{PayrollCalendarID} to filter the timesheets by payroll calendar id (optional)</param>
        /// <returns>Task of ApiResponse (Timesheets)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<Timesheets>> GetTimesheetsAsyncWithHttpInfo (string accessToken, string xeroTenantId, int? page = null, Guid? employeeId = null, Guid? payrollCalendarId = null)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling PayrollNzApi->GetTimesheets");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            

            if (page != null)
            {
                foreach (var kvp in Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToMultiMap("", "page", page))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            if (employeeId != null)
            {
                foreach (var kvp in Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToMultiMap("", "employeeId", employeeId))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            if (payrollCalendarId != null)
            {
                foreach (var kvp in Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToMultiMap("", "payrollCalendarId", payrollCalendarId))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.GetAsync<Timesheets>("/Timesheets", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetTimesheets", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// searches tracking categories 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <returns>Task of TrackingCategories</returns>
        public async System.Threading.Tasks.Task<TrackingCategories> GetTrackingCategoriesAsync (string accessToken, string xeroTenantId)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<TrackingCategories> localVarResponse = await GetTrackingCategoriesAsyncWithHttpInfo(accessToken, xeroTenantId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// searches tracking categories 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <returns>Task of ApiResponse (TrackingCategories)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<TrackingCategories>> GetTrackingCategoriesAsyncWithHttpInfo (string accessToken, string xeroTenantId)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling PayrollNzApi->GetTrackingCategories");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.GetAsync<TrackingCategories>("/settings/trackingCategories", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetTrackingCategories", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// revert a timesheet to draft 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="timesheetID">Identifier for the timesheet</param>
        /// <returns>Task of TimesheetObject</returns>
        public async System.Threading.Tasks.Task<TimesheetObject> RevertTimesheetAsync (string accessToken, string xeroTenantId, Guid timesheetID)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<TimesheetObject> localVarResponse = await RevertTimesheetAsyncWithHttpInfo(accessToken, xeroTenantId, timesheetID);
             return localVarResponse.Data;

        }

        /// <summary>
        /// revert a timesheet to draft 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="timesheetID">Identifier for the timesheet</param>
        /// <returns>Task of ApiResponse (TimesheetObject)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<TimesheetObject>> RevertTimesheetAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid timesheetID)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling PayrollNzApi->RevertTimesheet");

            // verify the required parameter 'timesheetID' is set
            if (timesheetID == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'timesheetID' when calling PayrollNzApi->RevertTimesheet");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (timesheetID != null)
                requestOptions.PathParameters.Add("TimesheetID", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(timesheetID)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.PostAsync<TimesheetObject>("/Timesheets/{TimesheetID}/RevertToDraft", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("RevertTimesheet", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// updates employee 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeId">Employee id for single object</param>
        /// <param name="employee"></param>
        /// <returns>Task of EmployeeObject</returns>
        public async System.Threading.Tasks.Task<EmployeeObject> UpdateEmployeeAsync (string accessToken, string xeroTenantId, Guid employeeId, Employee employee)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<EmployeeObject> localVarResponse = await UpdateEmployeeAsyncWithHttpInfo(accessToken, xeroTenantId, employeeId, employee);
             return localVarResponse.Data;

        }

        /// <summary>
        /// updates employee 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeId">Employee id for single object</param>
        /// <param name="employee"></param>
        /// <returns>Task of ApiResponse (EmployeeObject)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<EmployeeObject>> UpdateEmployeeAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid employeeId, Employee employee)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling PayrollNzApi->UpdateEmployee");

            // verify the required parameter 'employeeId' is set
            if (employeeId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'employeeId' when calling PayrollNzApi->UpdateEmployee");

            // verify the required parameter 'employee' is set
            if (employee == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'employee' when calling PayrollNzApi->UpdateEmployee");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (employeeId != null)
                requestOptions.PathParameters.Add("EmployeeId", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(employeeId)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            requestOptions.Data = employee;

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.PutAsync<EmployeeObject>("/Employees/{EmployeeId}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("UpdateEmployee", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// updates employee earnings template records 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeId">Employee id for single object</param>
        /// <param name="payTemplateEarningID">Id for single pay template earnings object</param>
        /// <param name="earningsTemplate"></param>
        /// <returns>Task of EarningsTemplateObject</returns>
        public async System.Threading.Tasks.Task<EarningsTemplateObject> UpdateEmployeeEarningsTemplateAsync (string accessToken, string xeroTenantId, Guid employeeId, Guid payTemplateEarningID, EarningsTemplate earningsTemplate)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<EarningsTemplateObject> localVarResponse = await UpdateEmployeeEarningsTemplateAsyncWithHttpInfo(accessToken, xeroTenantId, employeeId, payTemplateEarningID, earningsTemplate);
             return localVarResponse.Data;

        }

        /// <summary>
        /// updates employee earnings template records 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeId">Employee id for single object</param>
        /// <param name="payTemplateEarningID">Id for single pay template earnings object</param>
        /// <param name="earningsTemplate"></param>
        /// <returns>Task of ApiResponse (EarningsTemplateObject)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<EarningsTemplateObject>> UpdateEmployeeEarningsTemplateAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid employeeId, Guid payTemplateEarningID, EarningsTemplate earningsTemplate)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling PayrollNzApi->UpdateEmployeeEarningsTemplate");

            // verify the required parameter 'employeeId' is set
            if (employeeId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'employeeId' when calling PayrollNzApi->UpdateEmployeeEarningsTemplate");

            // verify the required parameter 'payTemplateEarningID' is set
            if (payTemplateEarningID == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'payTemplateEarningID' when calling PayrollNzApi->UpdateEmployeeEarningsTemplate");

            // verify the required parameter 'earningsTemplate' is set
            if (earningsTemplate == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'earningsTemplate' when calling PayrollNzApi->UpdateEmployeeEarningsTemplate");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (employeeId != null)
                requestOptions.PathParameters.Add("EmployeeId", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(employeeId)); // path parameter
            if (payTemplateEarningID != null)
                requestOptions.PathParameters.Add("PayTemplateEarningID", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(payTemplateEarningID)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            requestOptions.Data = earningsTemplate;

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.PutAsync<EarningsTemplateObject>("/Employees/{EmployeeId}/PayTemplates/earnings/{PayTemplateEarningID}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("UpdateEmployeeEarningsTemplate", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// updates employee leave records 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeId">Employee id for single object</param>
        /// <param name="leaveID">Leave id for single object</param>
        /// <param name="employeeLeave"></param>
        /// <returns>Task of EmployeeLeaveObject</returns>
        public async System.Threading.Tasks.Task<EmployeeLeaveObject> UpdateEmployeeLeaveAsync (string accessToken, string xeroTenantId, Guid employeeId, Guid leaveID, EmployeeLeave employeeLeave)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<EmployeeLeaveObject> localVarResponse = await UpdateEmployeeLeaveAsyncWithHttpInfo(accessToken, xeroTenantId, employeeId, leaveID, employeeLeave);
             return localVarResponse.Data;

        }

        /// <summary>
        /// updates employee leave records 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeId">Employee id for single object</param>
        /// <param name="leaveID">Leave id for single object</param>
        /// <param name="employeeLeave"></param>
        /// <returns>Task of ApiResponse (EmployeeLeaveObject)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<EmployeeLeaveObject>> UpdateEmployeeLeaveAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid employeeId, Guid leaveID, EmployeeLeave employeeLeave)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling PayrollNzApi->UpdateEmployeeLeave");

            // verify the required parameter 'employeeId' is set
            if (employeeId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'employeeId' when calling PayrollNzApi->UpdateEmployeeLeave");

            // verify the required parameter 'leaveID' is set
            if (leaveID == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'leaveID' when calling PayrollNzApi->UpdateEmployeeLeave");

            // verify the required parameter 'employeeLeave' is set
            if (employeeLeave == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'employeeLeave' when calling PayrollNzApi->UpdateEmployeeLeave");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (employeeId != null)
                requestOptions.PathParameters.Add("EmployeeId", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(employeeId)); // path parameter
            if (leaveID != null)
                requestOptions.PathParameters.Add("LeaveID", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(leaveID)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            requestOptions.Data = employeeLeave;

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.PutAsync<EmployeeLeaveObject>("/Employees/{EmployeeId}/Leave/{LeaveID}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("UpdateEmployeeLeave", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// updates employee salary and wages record 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeId">Employee id for single object</param>
        /// <param name="salaryAndWagesID">Id for single pay template earnings object</param>
        /// <param name="salaryAndWage"></param>
        /// <returns>Task of SalaryAndWageObject</returns>
        public async System.Threading.Tasks.Task<SalaryAndWageObject> UpdateEmployeeSalaryAndWageAsync (string accessToken, string xeroTenantId, Guid employeeId, Guid salaryAndWagesID, SalaryAndWage salaryAndWage)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<SalaryAndWageObject> localVarResponse = await UpdateEmployeeSalaryAndWageAsyncWithHttpInfo(accessToken, xeroTenantId, employeeId, salaryAndWagesID, salaryAndWage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// updates employee salary and wages record 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeId">Employee id for single object</param>
        /// <param name="salaryAndWagesID">Id for single pay template earnings object</param>
        /// <param name="salaryAndWage"></param>
        /// <returns>Task of ApiResponse (SalaryAndWageObject)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<SalaryAndWageObject>> UpdateEmployeeSalaryAndWageAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid employeeId, Guid salaryAndWagesID, SalaryAndWage salaryAndWage)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling PayrollNzApi->UpdateEmployeeSalaryAndWage");

            // verify the required parameter 'employeeId' is set
            if (employeeId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'employeeId' when calling PayrollNzApi->UpdateEmployeeSalaryAndWage");

            // verify the required parameter 'salaryAndWagesID' is set
            if (salaryAndWagesID == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'salaryAndWagesID' when calling PayrollNzApi->UpdateEmployeeSalaryAndWage");

            // verify the required parameter 'salaryAndWage' is set
            if (salaryAndWage == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'salaryAndWage' when calling PayrollNzApi->UpdateEmployeeSalaryAndWage");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (employeeId != null)
                requestOptions.PathParameters.Add("EmployeeId", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(employeeId)); // path parameter
            if (salaryAndWagesID != null)
                requestOptions.PathParameters.Add("SalaryAndWagesID", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(salaryAndWagesID)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            requestOptions.Data = salaryAndWage;

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.PutAsync<SalaryAndWageObject>("/Employees/{EmployeeId}/SalaryAndWages/{SalaryAndWagesID}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("UpdateEmployeeSalaryAndWage", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// updates the tax records for an employee 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeId">Employee id for single object</param>
        /// <param name="employeeTax"></param>
        /// <returns>Task of EmployeeTaxObject</returns>
        public async System.Threading.Tasks.Task<EmployeeTaxObject> UpdateEmployeeTaxAsync (string accessToken, string xeroTenantId, Guid employeeId, EmployeeTax employeeTax)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<EmployeeTaxObject> localVarResponse = await UpdateEmployeeTaxAsyncWithHttpInfo(accessToken, xeroTenantId, employeeId, employeeTax);
             return localVarResponse.Data;

        }

        /// <summary>
        /// updates the tax records for an employee 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeId">Employee id for single object</param>
        /// <param name="employeeTax"></param>
        /// <returns>Task of ApiResponse (EmployeeTaxObject)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<EmployeeTaxObject>> UpdateEmployeeTaxAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid employeeId, EmployeeTax employeeTax)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling PayrollNzApi->UpdateEmployeeTax");

            // verify the required parameter 'employeeId' is set
            if (employeeId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'employeeId' when calling PayrollNzApi->UpdateEmployeeTax");

            // verify the required parameter 'employeeTax' is set
            if (employeeTax == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'employeeTax' when calling PayrollNzApi->UpdateEmployeeTax");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (employeeId != null)
                requestOptions.PathParameters.Add("EmployeeId", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(employeeId)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            requestOptions.Data = employeeTax;

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.PostAsync<EmployeeTaxObject>("/Employees/{EmployeeId}/Tax", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("UpdateEmployeeTax", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// update a pay run 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="payRunID">Identifier for the pay run</param>
        /// <param name="payRun"></param>
        /// <returns>Task of PayRunObject</returns>
        public async System.Threading.Tasks.Task<PayRunObject> UpdatePayRunAsync (string accessToken, string xeroTenantId, Guid payRunID, PayRun payRun)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<PayRunObject> localVarResponse = await UpdatePayRunAsyncWithHttpInfo(accessToken, xeroTenantId, payRunID, payRun);
             return localVarResponse.Data;

        }

        /// <summary>
        /// update a pay run 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="payRunID">Identifier for the pay run</param>
        /// <param name="payRun"></param>
        /// <returns>Task of ApiResponse (PayRunObject)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<PayRunObject>> UpdatePayRunAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid payRunID, PayRun payRun)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling PayrollNzApi->UpdatePayRun");

            // verify the required parameter 'payRunID' is set
            if (payRunID == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'payRunID' when calling PayrollNzApi->UpdatePayRun");

            // verify the required parameter 'payRun' is set
            if (payRun == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'payRun' when calling PayrollNzApi->UpdatePayRun");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (payRunID != null)
                requestOptions.PathParameters.Add("PayRunID", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(payRunID)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            requestOptions.Data = payRun;

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.PutAsync<PayRunObject>("/PayRuns/{PayRunID}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("UpdatePayRun", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// creates employee pay slip 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="paySlipID">Identifier for the payslip</param>
        /// <param name="paySlip"></param>
        /// <returns>Task of PaySlipObject</returns>
        public async System.Threading.Tasks.Task<PaySlipObject> UpdatePaySlipLineItemsAsync (string accessToken, string xeroTenantId, Guid paySlipID, PaySlip paySlip)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<PaySlipObject> localVarResponse = await UpdatePaySlipLineItemsAsyncWithHttpInfo(accessToken, xeroTenantId, paySlipID, paySlip);
             return localVarResponse.Data;

        }

        /// <summary>
        /// creates employee pay slip 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="paySlipID">Identifier for the payslip</param>
        /// <param name="paySlip"></param>
        /// <returns>Task of ApiResponse (PaySlipObject)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<PaySlipObject>> UpdatePaySlipLineItemsAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid paySlipID, PaySlip paySlip)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling PayrollNzApi->UpdatePaySlipLineItems");

            // verify the required parameter 'paySlipID' is set
            if (paySlipID == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'paySlipID' when calling PayrollNzApi->UpdatePaySlipLineItems");

            // verify the required parameter 'paySlip' is set
            if (paySlip == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'paySlip' when calling PayrollNzApi->UpdatePaySlipLineItems");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (paySlipID != null)
                requestOptions.PathParameters.Add("PaySlipID", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(paySlipID)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            requestOptions.Data = paySlip;

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.PutAsync<PaySlipObject>("/PaySlips/{PaySlipID}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("UpdatePaySlipLineItems", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// update a timesheet line 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="timesheetID">Identifier for the timesheet</param>
        /// <param name="timesheetLineID">Identifier for the timesheet line</param>
        /// <param name="timesheetLine"></param>
        /// <returns>Task of TimesheetLineObject</returns>
        public async System.Threading.Tasks.Task<TimesheetLineObject> UpdateTimesheetLineAsync (string accessToken, string xeroTenantId, Guid timesheetID, Guid timesheetLineID, TimesheetLine timesheetLine)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<TimesheetLineObject> localVarResponse = await UpdateTimesheetLineAsyncWithHttpInfo(accessToken, xeroTenantId, timesheetID, timesheetLineID, timesheetLine);
             return localVarResponse.Data;

        }

        /// <summary>
        /// update a timesheet line 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="timesheetID">Identifier for the timesheet</param>
        /// <param name="timesheetLineID">Identifier for the timesheet line</param>
        /// <param name="timesheetLine"></param>
        /// <returns>Task of ApiResponse (TimesheetLineObject)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<TimesheetLineObject>> UpdateTimesheetLineAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid timesheetID, Guid timesheetLineID, TimesheetLine timesheetLine)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling PayrollNzApi->UpdateTimesheetLine");

            // verify the required parameter 'timesheetID' is set
            if (timesheetID == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'timesheetID' when calling PayrollNzApi->UpdateTimesheetLine");

            // verify the required parameter 'timesheetLineID' is set
            if (timesheetLineID == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'timesheetLineID' when calling PayrollNzApi->UpdateTimesheetLine");

            // verify the required parameter 'timesheetLine' is set
            if (timesheetLine == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'timesheetLine' when calling PayrollNzApi->UpdateTimesheetLine");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (timesheetID != null)
                requestOptions.PathParameters.Add("TimesheetID", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(timesheetID)); // path parameter
            if (timesheetLineID != null)
                requestOptions.PathParameters.Add("TimesheetLineID", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(timesheetLineID)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            requestOptions.Data = timesheetLine;

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.PutAsync<TimesheetLineObject>("/Timesheets/{TimesheetID}/Lines/{TimesheetLineID}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("UpdateTimesheetLine", response);
                if (exception != null) throw exception;
            }

            return response;
        }

    }
}
