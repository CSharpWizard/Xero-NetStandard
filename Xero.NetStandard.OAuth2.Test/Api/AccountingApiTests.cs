/* 
 * Accounting API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: api@xero.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using Xero.NetStandard.OAuth2.Client;
using Xero.NetStandard.OAuth2.Api;
using Xero.NetStandard.OAuth2.Model;
using System.Threading.Tasks;
using Bogus;
using AutoBogus;

namespace Xero.NetStandard.OAuth2.Test
{
    /// <summary>
    ///  Class for testing AccountingApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class AccountingApiTests : IDisposable
    {
        private AccountingApi instance;

        public AccountingApiTests()
        {
            var directory = Directory.GetCurrentDirectory();
            var configuration = TestHelper.GetApplicationConfiguration(directory);
            var config = new Xero.NetStandard.OAuth2.Client.Configuration();
            config.BasePath = configuration.AccountingBaseUrl;
            instance = new AccountingApi(config);
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        [Fact]
        public async Task test()
        {
            string test = instance.Configuration.BasePath;
            Console.WriteLine(test);
        }

        /// <summary>
        /// Test an instance of AccountingApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' AccountingApi
            //Assert.IsType(typeof(AccountingApi), instance, "instance is a AccountingApi");
        }


        /// <summary>
        /// Test CreateAccount
        /// </summary>
        [Fact]
        public async Task CreateAccountTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            string xeroTenantId = "null";
            var account = AutoFaker.Generate<Account>();
            var accessToken = "asd";
            var response = await instance.CreateAccountAsync(accessToken, xeroTenantId, account);
            Assert.IsType<Accounts> (response);
        }

        /// <summary>
        /// Test CreateAccountAttachmentByFileName
        /// </summary>
        [Fact]
        public void CreateAccountAttachmentByFileNameTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid accountID = null;
            //string fileName = null;
            //byte[] body = null;
            //var response = instance.CreateAccountAttachmentByFileNameAsync(xeroTenantId, accountID, fileName, body);
            //Assert.IsType<Attachments> (response);
        }

        /// <summary>
        /// Test CreateBankTransaction
        /// </summary>
        [Fact]
        public void CreateBankTransactionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //BankTransaction bankTransaction = null;
            //var response = instance.CreateBankTransactionAsync(xeroTenantId, bankTransaction);
            //Assert.IsType<BankTransactions> (response);
        }

        /// <summary>
        /// Test CreateBankTransactionAttachmentByFileName
        /// </summary>
        [Fact]
        public void CreateBankTransactionAttachmentByFileNameTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid bankTransactionID = null;
            //string fileName = null;
            //byte[] body = null;
            //var response = instance.CreateBankTransactionAttachmentByFileNameAsync(xeroTenantId, bankTransactionID, fileName, body);
            //Assert.IsType<Attachments> (response);
        }

        /// <summary>
        /// Test CreateBankTransactionHistoryRecord
        /// </summary>
        [Fact]
        public void CreateBankTransactionHistoryRecordTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid bankTransactionID = null;
            //HistoryRecords historyRecords = null;
            //var response = instance.CreateBankTransactionHistoryRecordAsync(xeroTenantId, bankTransactionID, historyRecords);
            //Assert.IsType<HistoryRecords> (response);
        }

        /// <summary>
        /// Test CreateBankTransactions
        /// </summary>
        [Fact]
        public void CreateBankTransactionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //BankTransactions bankTransactions = null;
            //bool? summarizeErrors = null;
            //var response = instance.CreateBankTransactionsAsync(xeroTenantId, bankTransactions, summarizeErrors);
            //Assert.IsType<BankTransactions> (response);
        }

        /// <summary>
        /// Test CreateBankTransfer
        /// </summary>
        [Fact]
        public void CreateBankTransferTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //BankTransfers bankTransfers = null;
            //var response = instance.CreateBankTransferAsync(xeroTenantId, bankTransfers);
            //Assert.IsType<BankTransfers> (response);
        }

        /// <summary>
        /// Test CreateBankTransferAttachmentByFileName
        /// </summary>
        [Fact]
        public void CreateBankTransferAttachmentByFileNameTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid bankTransferID = null;
            //string fileName = null;
            //byte[] body = null;
            //var response = instance.CreateBankTransferAttachmentByFileNameAsync(xeroTenantId, bankTransferID, fileName, body);
            //Assert.IsType<Attachments> (response);
        }

        /// <summary>
        /// Test CreateBankTransferHistoryRecord
        /// </summary>
        [Fact]
        public void CreateBankTransferHistoryRecordTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid bankTransferID = null;
            //HistoryRecords historyRecords = null;
            //var response = instance.CreateBankTransferHistoryRecordAsync(xeroTenantId, bankTransferID, historyRecords);
            //Assert.IsType<HistoryRecords> (response);
        }

        /// <summary>
        /// Test CreateBatchPayment
        /// </summary>
        [Fact]
        public void CreateBatchPaymentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //BatchPayments batchPayments = null;
            //var response = instance.CreateBatchPaymentAsync(xeroTenantId, batchPayments);
            //Assert.IsType<BatchPayments> (response);
        }

        /// <summary>
        /// Test CreateBatchPaymentHistoryRecord
        /// </summary>
        [Fact]
        public void CreateBatchPaymentHistoryRecordTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid batchPaymentID = null;
            //HistoryRecords historyRecords = null;
            //var response = instance.CreateBatchPaymentHistoryRecordAsync(xeroTenantId, batchPaymentID, historyRecords);
            //Assert.IsType<HistoryRecords> (response);
        }

        /// <summary>
        /// Test CreateBrandingThemePaymentServices
        /// </summary>
        [Fact]
        public void CreateBrandingThemePaymentServicesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid brandingThemeID = null;
            //PaymentService paymentService = null;
            //var response = instance.CreateBrandingThemePaymentServicesAsync(xeroTenantId, brandingThemeID, paymentService);
            //Assert.IsType<PaymentServices> (response);
        }

        /// <summary>
        /// Test CreateContact
        /// </summary>
        [Fact]
        public void CreateContactTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Contact contact = null;
            //var response = instance.CreateContactAsync(xeroTenantId, contact);
            //Assert.IsType<Contacts> (response);
        }

        /// <summary>
        /// Test CreateContactAttachmentByFileName
        /// </summary>
        [Fact]
        public void CreateContactAttachmentByFileNameTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid contactID = null;
            //string fileName = null;
            //byte[] body = null;
            //var response = instance.CreateContactAttachmentByFileNameAsync(xeroTenantId, contactID, fileName, body);
            //Assert.IsType<Attachments> (response);
        }

        /// <summary>
        /// Test CreateContactGroup
        /// </summary>
        [Fact]
        public void CreateContactGroupTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //ContactGroups contactGroups = null;
            //var response = instance.CreateContactGroupAsync(xeroTenantId, contactGroups);
            //Assert.IsType<ContactGroups> (response);
        }

        /// <summary>
        /// Test CreateContactGroupContacts
        /// </summary>
        [Fact]
        public void CreateContactGroupContactsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid contactGroupID = null;
            //Contacts contacts = null;
            //var response = instance.CreateContactGroupContactsAsync(xeroTenantId, contactGroupID, contacts);
            //Assert.IsType<Contacts> (response);
        }

        /// <summary>
        /// Test CreateContactHistory
        /// </summary>
        [Fact]
        public void CreateContactHistoryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid contactID = null;
            //HistoryRecords historyRecords = null;
            //var response = instance.CreateContactHistoryAsync(xeroTenantId, contactID, historyRecords);
            //Assert.IsType<HistoryRecords> (response);
        }

        /// <summary>
        /// Test CreateContacts
        /// </summary>
        [Fact]
        public void CreateContactsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Contacts contacts = null;
            //bool? summarizeErrors = null;
            //var response = instance.CreateContactsAsync(xeroTenantId, contacts, summarizeErrors);
            //Assert.IsType<Contacts> (response);
        }

        /// <summary>
        /// Test CreateCreditNote
        /// </summary>
        [Fact]
        public void CreateCreditNoteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //CreditNote creditNote = null;
            //var response = instance.CreateCreditNoteAsync(xeroTenantId, creditNote);
            //Assert.IsType<CreditNotes> (response);
        }

        /// <summary>
        /// Test CreateCreditNoteAllocation
        /// </summary>
        [Fact]
        public void CreateCreditNoteAllocationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid creditNoteID = null;
            //Allocations allocations = null;
            //var response = instance.CreateCreditNoteAllocationAsync(xeroTenantId, creditNoteID, allocations);
            //Assert.IsType<Allocations> (response);
        }

        /// <summary>
        /// Test CreateCreditNoteAttachmentByFileName
        /// </summary>
        [Fact]
        public void CreateCreditNoteAttachmentByFileNameTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid creditNoteID = null;
            //string fileName = null;
            //byte[] body = null;
            //var response = instance.CreateCreditNoteAttachmentByFileNameAsync(xeroTenantId, creditNoteID, fileName, body);
            //Assert.IsType<Attachments> (response);
        }

        /// <summary>
        /// Test CreateCreditNoteHistory
        /// </summary>
        [Fact]
        public void CreateCreditNoteHistoryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid creditNoteID = null;
            //HistoryRecords historyRecords = null;
            //var response = instance.CreateCreditNoteHistoryAsync(xeroTenantId, creditNoteID, historyRecords);
            //Assert.IsType<HistoryRecords> (response);
        }

        /// <summary>
        /// Test CreateCreditNotes
        /// </summary>
        [Fact]
        public void CreateCreditNotesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //CreditNotes creditNotes = null;
            //bool? summarizeErrors = null;
            //var response = instance.CreateCreditNotesAsync(xeroTenantId, creditNotes, summarizeErrors);
            //Assert.IsType<CreditNotes> (response);
        }

        /// <summary>
        /// Test CreateCurrency
        /// </summary>
        [Fact]
        public void CreateCurrencyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Currency currency = null;
            //var response = instance.CreateCurrencyAsync(xeroTenantId, currency);
            //Assert.IsType<Currencies> (response);
        }

        /// <summary>
        /// Test CreateEmployee
        /// </summary>
        [Fact]
        public void CreateEmployeeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Employee employee = null;
            //var response = instance.CreateEmployeeAsync(xeroTenantId, employee);
            //Assert.IsType<Employees> (response);
        }

        /// <summary>
        /// Test CreateEmployees
        /// </summary>
        [Fact]
        public void CreateEmployeesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Employees employees = null;
            //var response = instance.CreateEmployeesAsync(xeroTenantId, employees);
            //Assert.IsType<Employees> (response);
        }

        /// <summary>
        /// Test CreateExpenseClaimHistory
        /// </summary>
        [Fact]
        public void CreateExpenseClaimHistoryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid expenseClaimID = null;
            //HistoryRecords historyRecords = null;
            //var response = instance.CreateExpenseClaimHistoryAsync(xeroTenantId, expenseClaimID, historyRecords);
            //Assert.IsType<HistoryRecords> (response);
        }

        /// <summary>
        /// Test CreateExpenseClaims
        /// </summary>
        [Fact]
        public void CreateExpenseClaimsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //ExpenseClaims expenseClaims = null;
            //var response = instance.CreateExpenseClaimsAsync(xeroTenantId, expenseClaims);
            //Assert.IsType<ExpenseClaims> (response);
        }

        /// <summary>
        /// Test CreateInvoice
        /// </summary>
        [Fact]
        public void CreateInvoiceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Invoice invoice = null;
            //var response = instance.CreateInvoiceAsync(xeroTenantId, invoice);
            //Assert.IsType<Invoices> (response);
        }

        /// <summary>
        /// Test CreateInvoiceAttachmentByFileName
        /// </summary>
        [Fact]
        public void CreateInvoiceAttachmentByFileNameTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid invoiceID = null;
            //string fileName = null;
            //byte[] body = null;
            //var response = instance.CreateInvoiceAttachmentByFileNameAsync(xeroTenantId, invoiceID, fileName, body);
            //Assert.IsType<Attachments> (response);
        }

        /// <summary>
        /// Test CreateInvoiceHistory
        /// </summary>
        [Fact]
        public void CreateInvoiceHistoryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid invoiceID = null;
            //HistoryRecords historyRecords = null;
            //var response = instance.CreateInvoiceHistoryAsync(xeroTenantId, invoiceID, historyRecords);
            //Assert.IsType<HistoryRecords> (response);
        }

        /// <summary>
        /// Test CreateInvoices
        /// </summary>
        [Fact]
        public void CreateInvoicesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Invoices invoices = null;
            //bool? summarizeErrors = null;
            //var response = instance.CreateInvoicesAsync(xeroTenantId, invoices, summarizeErrors);
            //Assert.IsType<Invoices> (response);
        }

        /// <summary>
        /// Test CreateItem
        /// </summary>
        [Fact]
        public void CreateItemTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Item item = null;
            //var response = instance.CreateItemAsync(xeroTenantId, item);
            //Assert.IsType<Items> (response);
        }

        /// <summary>
        /// Test CreateItemHistory
        /// </summary>
        [Fact]
        public void CreateItemHistoryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid itemID = null;
            //HistoryRecords historyRecords = null;
            //var response = instance.CreateItemHistoryAsync(xeroTenantId, itemID, historyRecords);
            //Assert.IsType<HistoryRecords> (response);
        }

        /// <summary>
        /// Test CreateItems
        /// </summary>
        [Fact]
        public void CreateItemsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Items items = null;
            //bool? summarizeErrors = null;
            //var response = instance.CreateItemsAsync(xeroTenantId, items, summarizeErrors);
            //Assert.IsType<Items> (response);
        }

        /// <summary>
        /// Test CreateLinkedTransaction
        /// </summary>
        [Fact]
        public void CreateLinkedTransactionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //LinkedTransaction linkedTransaction = null;
            //var response = instance.CreateLinkedTransactionAsync(xeroTenantId, linkedTransaction);
            //Assert.IsType<LinkedTransactions> (response);
        }

        /// <summary>
        /// Test CreateManualJournal
        /// </summary>
        [Fact]
        public void CreateManualJournalTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //ManualJournal manualJournal = null;
            //var response = instance.CreateManualJournalAsync(xeroTenantId, manualJournal);
            //Assert.IsType<ManualJournals> (response);
        }

        /// <summary>
        /// Test CreateManualJournalAttachmentByFileName
        /// </summary>
        [Fact]
        public void CreateManualJournalAttachmentByFileNameTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid manualJournalID = null;
            //string fileName = null;
            //byte[] body = null;
            //var response = instance.CreateManualJournalAttachmentByFileNameAsync(xeroTenantId, manualJournalID, fileName, body);
            //Assert.IsType<Attachments> (response);
        }

        /// <summary>
        /// Test CreateManualJournals
        /// </summary>
        [Fact]
        public void CreateManualJournalsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //ManualJournals manualJournals = null;
            //var response = instance.CreateManualJournalsAsync(xeroTenantId, manualJournals);
            //Assert.IsType<ManualJournals> (response);
        }

        /// <summary>
        /// Test CreateOverpaymentAllocation
        /// </summary>
        [Fact]
        public void CreateOverpaymentAllocationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid overpaymentID = null;
            //Allocation allocation = null;
            //var response = instance.CreateOverpaymentAllocationAsync(xeroTenantId, overpaymentID, allocation);
            //Assert.IsType<Allocations> (response);
        }

        /// <summary>
        /// Test CreateOverpaymentAllocations
        /// </summary>
        [Fact]
        public void CreateOverpaymentAllocationsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid overpaymentID = null;
            //Allocations allocations = null;
            //var response = instance.CreateOverpaymentAllocationsAsync(xeroTenantId, overpaymentID, allocations);
            //Assert.IsType<Allocations> (response);
        }

        /// <summary>
        /// Test CreateOverpaymentHistory
        /// </summary>
        [Fact]
        public void CreateOverpaymentHistoryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid overpaymentID = null;
            //HistoryRecords historyRecords = null;
            //var response = instance.CreateOverpaymentHistoryAsync(xeroTenantId, overpaymentID, historyRecords);
            //Assert.IsType<HistoryRecords> (response);
        }

        /// <summary>
        /// Test CreatePayment
        /// </summary>
        [Fact]
        public void CreatePaymentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Payment payment = null;
            //var response = instance.CreatePaymentAsync(xeroTenantId, payment);
            //Assert.IsType<Payments> (response);
        }

        /// <summary>
        /// Test CreatePaymentHistory
        /// </summary>
        [Fact]
        public void CreatePaymentHistoryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid paymentID = null;
            //HistoryRecords historyRecords = null;
            //var response = instance.CreatePaymentHistoryAsync(xeroTenantId, paymentID, historyRecords);
            //Assert.IsType<HistoryRecords> (response);
        }

        /// <summary>
        /// Test CreatePaymentService
        /// </summary>
        [Fact]
        public void CreatePaymentServiceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //PaymentServices paymentServices = null;
            //var response = instance.CreatePaymentServiceAsync(xeroTenantId, paymentServices);
            //Assert.IsType<PaymentServices> (response);
        }

        /// <summary>
        /// Test CreatePayments
        /// </summary>
        [Fact]
        public void CreatePaymentsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Payments payments = null;
            //var response = instance.CreatePaymentsAsync(xeroTenantId, payments);
            //Assert.IsType<Payments> (response);
        }

        /// <summary>
        /// Test CreatePrepaymentAllocation
        /// </summary>
        [Fact]
        public void CreatePrepaymentAllocationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid prepaymentID = null;
            //Allocations allocations = null;
            //var response = instance.CreatePrepaymentAllocationAsync(xeroTenantId, prepaymentID, allocations);
            //Assert.IsType<Allocations> (response);
        }

        /// <summary>
        /// Test CreatePrepaymentHistory
        /// </summary>
        [Fact]
        public void CreatePrepaymentHistoryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid prepaymentID = null;
            //HistoryRecords historyRecords = null;
            //var response = instance.CreatePrepaymentHistoryAsync(xeroTenantId, prepaymentID, historyRecords);
            //Assert.IsType<HistoryRecords> (response);
        }

        /// <summary>
        /// Test CreatePurchaseOrder
        /// </summary>
        [Fact]
        public void CreatePurchaseOrderTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //PurchaseOrder purchaseOrder = null;
            //var response = instance.CreatePurchaseOrderAsync(xeroTenantId, purchaseOrder);
            //Assert.IsType<PurchaseOrders> (response);
        }

        /// <summary>
        /// Test CreatePurchaseOrderHistory
        /// </summary>
        [Fact]
        public void CreatePurchaseOrderHistoryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid purchaseOrderID = null;
            //HistoryRecords historyRecords = null;
            //var response = instance.CreatePurchaseOrderHistoryAsync(xeroTenantId, purchaseOrderID, historyRecords);
            //Assert.IsType<HistoryRecords> (response);
        }

        /// <summary>
        /// Test CreatePurchaseOrders
        /// </summary>
        [Fact]
        public void CreatePurchaseOrdersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //PurchaseOrders purchaseOrders = null;
            //bool? summarizeErrors = null;
            //var response = instance.CreatePurchaseOrdersAsync(xeroTenantId, purchaseOrders, summarizeErrors);
            //Assert.IsType<PurchaseOrders> (response);
        }

        /// <summary>
        /// Test CreateReceipt
        /// </summary>
        [Fact]
        public void CreateReceiptTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Receipts receipts = null;
            //var response = instance.CreateReceiptAsync(xeroTenantId, receipts);
            //Assert.IsType<Receipts> (response);
        }

        /// <summary>
        /// Test CreateReceiptAttachmentByFileName
        /// </summary>
        [Fact]
        public void CreateReceiptAttachmentByFileNameTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid receiptID = null;
            //string fileName = null;
            //byte[] body = null;
            //var response = instance.CreateReceiptAttachmentByFileNameAsync(xeroTenantId, receiptID, fileName, body);
            //Assert.IsType<Attachments> (response);
        }

        /// <summary>
        /// Test CreateReceiptHistory
        /// </summary>
        [Fact]
        public void CreateReceiptHistoryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid receiptID = null;
            //HistoryRecords historyRecords = null;
            //var response = instance.CreateReceiptHistoryAsync(xeroTenantId, receiptID, historyRecords);
            //Assert.IsType<HistoryRecords> (response);
        }

        /// <summary>
        /// Test CreateRepeatingInvoiceAttachmentByFileName
        /// </summary>
        [Fact]
        public void CreateRepeatingInvoiceAttachmentByFileNameTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid repeatingInvoiceID = null;
            //string fileName = null;
            //byte[] body = null;
            //var response = instance.CreateRepeatingInvoiceAttachmentByFileNameAsync(xeroTenantId, repeatingInvoiceID, fileName, body);
            //Assert.IsType<Attachments> (response);
        }

        /// <summary>
        /// Test CreateRepeatingInvoiceHistory
        /// </summary>
        [Fact]
        public void CreateRepeatingInvoiceHistoryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid repeatingInvoiceID = null;
            //HistoryRecords historyRecords = null;
            //var response = instance.CreateRepeatingInvoiceHistoryAsync(xeroTenantId, repeatingInvoiceID, historyRecords);
            //Assert.IsType<HistoryRecords> (response);
        }

        /// <summary>
        /// Test CreateTaxRates
        /// </summary>
        [Fact]
        public void CreateTaxRatesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //TaxRates taxRates = null;
            //var response = instance.CreateTaxRatesAsync(xeroTenantId, taxRates);
            //Assert.IsType<TaxRates> (response);
        }

        /// <summary>
        /// Test CreateTrackingCategory
        /// </summary>
        [Fact]
        public void CreateTrackingCategoryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //TrackingCategory trackingCategory = null;
            //var response = instance.CreateTrackingCategoryAsync(xeroTenantId, trackingCategory);
            //Assert.IsType<TrackingCategories> (response);
        }

        /// <summary>
        /// Test CreateTrackingOptions
        /// </summary>
        [Fact]
        public void CreateTrackingOptionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid trackingCategoryID = null;
            //TrackingOption trackingOption = null;
            //var response = instance.CreateTrackingOptionsAsync(xeroTenantId, trackingCategoryID, trackingOption);
            //Assert.IsType<TrackingOptions> (response);
        }

        /// <summary>
        /// Test DeleteAccount
        /// </summary>
        [Fact]
        public void DeleteAccountTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid accountID = null;
            //var response = instance.DeleteAccountAsync(xeroTenantId, accountID);
            //Assert.IsType<Accounts> (response);
        }

        /// <summary>
        /// Test DeleteContactGroupContact
        /// </summary>
        [Fact]
        public void DeleteContactGroupContactTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid contactGroupID = null;
            //Guid contactID = null;
            //instance.DeleteContactGroupContactAsync(xeroTenantId, contactGroupID, contactID);

        }

        /// <summary>
        /// Test DeleteContactGroupContacts
        /// </summary>
        [Fact]
        public void DeleteContactGroupContactsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid contactGroupID = null;
            //instance.DeleteContactGroupContactsAsync(xeroTenantId, contactGroupID);

        }

        /// <summary>
        /// Test DeleteItem
        /// </summary>
        [Fact]
        public void DeleteItemTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid itemID = null;
            //instance.DeleteItemAsync(xeroTenantId, itemID);

        }

        /// <summary>
        /// Test DeleteLinkedTransaction
        /// </summary>
        [Fact]
        public void DeleteLinkedTransactionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid linkedTransactionID = null;
            //instance.DeleteLinkedTransactionAsync(xeroTenantId, linkedTransactionID);

        }

        /// <summary>
        /// Test DeletePayment
        /// </summary>
        [Fact]
        public void DeletePaymentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid paymentID = null;
            //Payments payments = null;
            //var response = instance.DeletePaymentAsync(xeroTenantId, paymentID, payments);
            //Assert.IsType<Payments> (response);
        }

        /// <summary>
        /// Test DeleteTrackingCategory
        /// </summary>
        [Fact]
        public void DeleteTrackingCategoryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid trackingCategoryID = null;
            //var response = instance.DeleteTrackingCategoryAsync(xeroTenantId, trackingCategoryID);
            //Assert.IsType<TrackingCategories> (response);
        }

        /// <summary>
        /// Test DeleteTrackingOptions
        /// </summary>
        [Fact]
        public void DeleteTrackingOptionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid trackingCategoryID = null;
            //Guid trackingOptionID = null;
            //var response = instance.DeleteTrackingOptionsAsync(xeroTenantId, trackingCategoryID, trackingOptionID);
            //Assert.IsType<TrackingOptions> (response);
        }

        /// <summary>
        /// Test EmailInvoice
        /// </summary>
        [Fact]
        public void EmailInvoiceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid invoiceID = null;
            //RequestEmpty requestEmpty = null;
            //instance.EmailInvoiceAsync(xeroTenantId, invoiceID, requestEmpty);

        }

        /// <summary>
        /// Test GetAccount
        /// </summary>
        [Fact]
        public void GetAccountTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid? accountID = null;
           // var response = instance.GetAccountAsync(xeroTenantId, accountID);
            //Assert.IsType<Accounts> (response);
        }

        /// <summary>
        /// Test GetAccountAttachmentByFileName
        /// </summary>
        [Fact]
        public void GetAccountAttachmentByFileNameTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid accountID = null;
            //string fileName = null;
            //string contentType = null;
            //var response = instance.GetAccountAttachmentByFileNameAsync(xeroTenantId, accountID, fileName, contentType);
            //Assert.IsType<System.IO.Stream> (response);
        }

        /// <summary>
        /// Test GetAccountAttachmentById
        /// </summary>
        [Fact]
        public void GetAccountAttachmentByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid accountID = null;
            //Guid attachmentID = null;
            //string contentType = null;
            //var response = instance.GetAccountAttachmentByIdAsync(xeroTenantId, accountID, attachmentID, contentType);
            //Assert.IsType<System.IO.Stream> (response);
        }

        /// <summary>
        /// Test GetAccountAttachments
        /// </summary>
        [Fact]
        public void GetAccountAttachmentsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid accountID = null;
            //var response = instance.GetAccountAttachmentsAsync(xeroTenantId, accountID);
            //Assert.IsType<Attachments> (response);
        }

        /// <summary>
        /// Test GetAccounts
        /// </summary>
        [Fact]
        public void GetAccountsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //DateTime? ifModifiedSince = null;
            //string where = null;
            //string order = null;
            //var response = instance.GetAccountsAsync(xeroTenantId, ifModifiedSince, where, order);
            //Assert.IsType<Accounts> (response);
        }

        /// <summary>
        /// Test GetBankTransaction
        /// </summary>
        [Fact]
        public void GetBankTransactionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid bankTransactionID = null;
            //var response = instance.GetBankTransactionAsync(xeroTenantId, bankTransactionID);
            //Assert.IsType<BankTransactions> (response);
        }

        /// <summary>
        /// Test GetBankTransactionAttachmentByFileName
        /// </summary>
        [Fact]
        public void GetBankTransactionAttachmentByFileNameTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid bankTransactionID = null;
            //string fileName = null;
            //string contentType = null;
            //var response = instance.GetBankTransactionAttachmentByFileNameAsync(xeroTenantId, bankTransactionID, fileName, contentType);
            //Assert.IsType<System.IO.Stream> (response);
        }

        /// <summary>
        /// Test GetBankTransactionAttachmentById
        /// </summary>
        [Fact]
        public void GetBankTransactionAttachmentByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid bankTransactionID = null;
            //Guid attachmentID = null;
            //string contentType = null;
            //var response = instance.GetBankTransactionAttachmentByIdAsync(xeroTenantId, bankTransactionID, attachmentID, contentType);
            //Assert.IsType<System.IO.Stream> (response);
        }

        /// <summary>
        /// Test GetBankTransactionAttachments
        /// </summary>
        [Fact]
        public void GetBankTransactionAttachmentsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid bankTransactionID = null;
            //var response = instance.GetBankTransactionAttachmentsAsync(xeroTenantId, bankTransactionID);
            //Assert.IsType<Attachments> (response);
        }

        /// <summary>
        /// Test GetBankTransactions
        /// </summary>
        [Fact]
        public void GetBankTransactionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //DateTime? ifModifiedSince = null;
            //string where = null;
            //string order = null;
            //int? page = null;
            //int? unitdp = null;
            //var response = instance.GetBankTransactionsAsync(xeroTenantId, ifModifiedSince, where, order, page, unitdp);
            //Assert.IsType<BankTransactions> (response);
        }

        /// <summary>
        /// Test GetBankTransactionsHistory
        /// </summary>
        [Fact]
        public void GetBankTransactionsHistoryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid bankTransactionID = null;
            //var response = instance.GetBankTransactionsHistoryAsync(xeroTenantId, bankTransactionID);
            //Assert.IsType<HistoryRecords> (response);
        }

        /// <summary>
        /// Test GetBankTransfer
        /// </summary>
        [Fact]
        public void GetBankTransferTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid bankTransferID = null;
            //var response = instance.GetBankTransferAsync(xeroTenantId, bankTransferID);
            //Assert.IsType<BankTransfers> (response);
        }

        /// <summary>
        /// Test GetBankTransferAttachmentByFileName
        /// </summary>
        [Fact]
        public void GetBankTransferAttachmentByFileNameTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid bankTransferID = null;
            //string fileName = null;
            //string contentType = null;
            //var response = instance.GetBankTransferAttachmentByFileNameAsync(xeroTenantId, bankTransferID, fileName, contentType);
            //Assert.IsType<System.IO.Stream> (response);
        }

        /// <summary>
        /// Test GetBankTransferAttachmentById
        /// </summary>
        [Fact]
        public void GetBankTransferAttachmentByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid bankTransferID = null;
            //Guid attachmentID = null;
            //string contentType = null;
            //var response = instance.GetBankTransferAttachmentByIdAsync(xeroTenantId, bankTransferID, attachmentID, contentType);
            //Assert.IsType<System.IO.Stream> (response);
        }

        /// <summary>
        /// Test GetBankTransferAttachments
        /// </summary>
        [Fact]
        public void GetBankTransferAttachmentsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid bankTransferID = null;
            //var response = instance.GetBankTransferAttachmentsAsync(xeroTenantId, bankTransferID);
            //Assert.IsType<Attachments> (response);
        }

        /// <summary>
        /// Test GetBankTransferHistory
        /// </summary>
        [Fact]
        public void GetBankTransferHistoryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid bankTransferID = null;
            //var response = instance.GetBankTransferHistoryAsync(xeroTenantId, bankTransferID);
            //Assert.IsType<HistoryRecords> (response);
        }

        /// <summary>
        /// Test GetBankTransfers
        /// </summary>
        [Fact]
        public void GetBankTransfersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //DateTime? ifModifiedSince = null;
            //string where = null;
            //string order = null;
            //var response = instance.GetBankTransfersAsync(xeroTenantId, ifModifiedSince, where, order);
            //Assert.IsType<BankTransfers> (response);
        }

        /// <summary>
        /// Test GetBatchPaymentHistory
        /// </summary>
        [Fact]
        public void GetBatchPaymentHistoryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid batchPaymentID = null;
            //var response = instance.GetBatchPaymentHistoryAsync(xeroTenantId, batchPaymentID);
            //Assert.IsType<HistoryRecords> (response);
        }

        /// <summary>
        /// Test GetBatchPayments
        /// </summary>
        [Fact]
        public void GetBatchPaymentsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //DateTime? ifModifiedSince = null;
            //string where = null;
            //string order = null;
            //var response = instance.GetBatchPaymentsAsync(xeroTenantId, ifModifiedSince, where, order);
            //Assert.IsType<BatchPayments> (response);
        }

        /// <summary>
        /// Test GetBrandingTheme
        /// </summary>
        [Fact]
        public void GetBrandingThemeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid brandingThemeID = null;
            //var response = instance.GetBrandingThemeAsync(xeroTenantId, brandingThemeID);
            //Assert.IsType<BrandingThemes> (response);
        }

        /// <summary>
        /// Test GetBrandingThemePaymentServices
        /// </summary>
        [Fact]
        public void GetBrandingThemePaymentServicesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid brandingThemeID = null;
            //var response = instance.GetBrandingThemePaymentServicesAsync(xeroTenantId, brandingThemeID);
            //Assert.IsType<PaymentServices> (response);
        }

        /// <summary>
        /// Test GetBrandingThemes
        /// </summary>
        [Fact]
        public void GetBrandingThemesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //var response = instance.GetBrandingThemesAsync(xeroTenantId);
            //Assert.IsType<BrandingThemes> (response);
        }

        /// <summary>
        /// Test GetContact
        /// </summary>
        [Fact]
        public void GetContactTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid contactID = null;
            //var response = instance.GetContactAsync(xeroTenantId, contactID);
            //Assert.IsType<Contacts> (response);
        }

        /// <summary>
        /// Test GetContactAttachmentByFileName
        /// </summary>
        [Fact]
        public void GetContactAttachmentByFileNameTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid contactID = null;
            //string fileName = null;
            //string contentType = null;
            //var response = instance.GetContactAttachmentByFileNameAsync(xeroTenantId, contactID, fileName, contentType);
            //Assert.IsType<System.IO.Stream> (response);
        }

        /// <summary>
        /// Test GetContactAttachmentById
        /// </summary>
        [Fact]
        public void GetContactAttachmentByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid contactID = null;
            //Guid attachmentID = null;
            //string contentType = null;
            //var response = instance.GetContactAttachmentByIdAsync(xeroTenantId, contactID, attachmentID, contentType);
            //Assert.IsType<System.IO.Stream> (response);
        }

        /// <summary>
        /// Test GetContactAttachments
        /// </summary>
        [Fact]
        public void GetContactAttachmentsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid contactID = null;
            //var response = instance.GetContactAttachmentsAsync(xeroTenantId, contactID);
            //Assert.IsType<Attachments> (response);
        }

        /// <summary>
        /// Test GetContactCISSettings
        /// </summary>
        [Fact]
        public void GetContactCISSettingsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid contactID = null;
            //var response = instance.GetContactCISSettingsAsync(xeroTenantId, contactID);
            //Assert.IsType<CISSettings> (response);
        }

        /// <summary>
        /// Test GetContactGroup
        /// </summary>
        [Fact]
        public void GetContactGroupTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid contactGroupID = null;
            //var response = instance.GetContactGroupAsync(xeroTenantId, contactGroupID);
            //Assert.IsType<ContactGroups> (response);
        }

        /// <summary>
        /// Test GetContactGroups
        /// </summary>
        [Fact]
        public void GetContactGroupsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //string where = null;
            //string order = null;
            //var response = instance.GetContactGroupsAsync(xeroTenantId, where, order);
            //Assert.IsType<ContactGroups> (response);
        }

        /// <summary>
        /// Test GetContactHistory
        /// </summary>
        [Fact]
        public void GetContactHistoryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid contactID = null;
            //var response = instance.GetContactHistoryAsync(xeroTenantId, contactID);
            //Assert.IsType<HistoryRecords> (response);
        }

        /// <summary>
        /// Test GetContacts
        /// </summary>
        [Fact]
        public void GetContactsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //DateTime? ifModifiedSince = null;
            //string where = null;
            //string order = null;
            //List<Guid> iDs = null;
            //int? page = null;
            //bool? includeArchived = null;
            //var response = instance.GetContactsAsync(xeroTenantId, ifModifiedSince, where, order, iDs, page, includeArchived);
            //Assert.IsType<Contacts> (response);
        }

        /// <summary>
        /// Test GetCreditNote
        /// </summary>
        [Fact]
        public void GetCreditNoteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid creditNoteID = null;
            //var response = instance.GetCreditNoteAsync(xeroTenantId, creditNoteID);
            //Assert.IsType<CreditNotes> (response);
        }

        /// <summary>
        /// Test GetCreditNoteAsPdf
        /// </summary>
        [Fact]
        public void GetCreditNoteAsPdfTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid creditNoteID = null;
            //string contentType = null;
            //var response = instance.GetCreditNoteAsPdfAsync(xeroTenantId, creditNoteID, contentType);
            //Assert.IsType<System.IO.Stream> (response);
        }

        /// <summary>
        /// Test GetCreditNoteAttachmentByFileName
        /// </summary>
        [Fact]
        public void GetCreditNoteAttachmentByFileNameTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid creditNoteID = null;
            //string fileName = null;
            //string contentType = null;
            //var response = instance.GetCreditNoteAttachmentByFileNameAsync(xeroTenantId, creditNoteID, fileName, contentType);
            //Assert.IsType<System.IO.Stream> (response);
        }

        /// <summary>
        /// Test GetCreditNoteAttachmentById
        /// </summary>
        [Fact]
        public void GetCreditNoteAttachmentByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid creditNoteID = null;
            //Guid attachmentID = null;
            //string contentType = null;
            //var response = instance.GetCreditNoteAttachmentByIdAsync(xeroTenantId, creditNoteID, attachmentID, contentType);
            //Assert.IsType<System.IO.Stream> (response);
        }

        /// <summary>
        /// Test GetCreditNoteAttachments
        /// </summary>
        [Fact]
        public void GetCreditNoteAttachmentsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid creditNoteID = null;
            //var response = instance.GetCreditNoteAttachmentsAsync(xeroTenantId, creditNoteID);
            //Assert.IsType<Attachments> (response);
        }

        /// <summary>
        /// Test GetCreditNoteHistory
        /// </summary>
        [Fact]
        public void GetCreditNoteHistoryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid creditNoteID = null;
            //var response = instance.GetCreditNoteHistoryAsync(xeroTenantId, creditNoteID);
            //Assert.IsType<HistoryRecords> (response);
        }

        /// <summary>
        /// Test GetCreditNotes
        /// </summary>
        [Fact]
        public void GetCreditNotesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //DateTime? ifModifiedSince = null;
            //string where = null;
            //string order = null;
            //int? page = null;
            //var response = instance.GetCreditNotesAsync(xeroTenantId, ifModifiedSince, where, order, page);
            //Assert.IsType<CreditNotes> (response);
        }

        /// <summary>
        /// Test GetCurrencies
        /// </summary>
        [Fact]
        public void GetCurrenciesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //string where = null;
            //string order = null;
            //var response = instance.GetCurrenciesAsync(xeroTenantId, where, order);
            //Assert.IsType<Currencies> (response);
        }

        /// <summary>
        /// Test GetEmployee
        /// </summary>
        [Fact]
        public void GetEmployeeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid employeeID = null;
            //var response = instance.GetEmployeeAsync(xeroTenantId, employeeID);
            //Assert.IsType<Employees> (response);
        }

        /// <summary>
        /// Test GetEmployees
        /// </summary>
        [Fact]
        public void GetEmployeesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //DateTime? ifModifiedSince = null;
            //string where = null;
            //string order = null;
            //var response = instance.GetEmployeesAsync(xeroTenantId, ifModifiedSince, where, order);
            //Assert.IsType<Employees> (response);
        }

        /// <summary>
        /// Test GetExpenseClaim
        /// </summary>
        [Fact]
        public void GetExpenseClaimTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid expenseClaimID = null;
            //var response = instance.GetExpenseClaimAsync(xeroTenantId, expenseClaimID);
            //Assert.IsType<ExpenseClaims> (response);
        }

        /// <summary>
        /// Test GetExpenseClaimHistory
        /// </summary>
        [Fact]
        public void GetExpenseClaimHistoryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid expenseClaimID = null;
            //var response = instance.GetExpenseClaimHistoryAsync(xeroTenantId, expenseClaimID);
            //Assert.IsType<HistoryRecords> (response);
        }

        /// <summary>
        /// Test GetExpenseClaims
        /// </summary>
        [Fact]
        public void GetExpenseClaimsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //DateTime? ifModifiedSince = null;
            //string where = null;
            //string order = null;
            //var response = instance.GetExpenseClaimsAsync(xeroTenantId, ifModifiedSince, where, order);
            //Assert.IsType<ExpenseClaims> (response);
        }

        /// <summary>
        /// Test GetInvoice
        /// </summary>
        [Fact]
        public void GetInvoiceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid invoiceID = null;
            //var response = instance.GetInvoiceAsync(xeroTenantId, invoiceID);
            //Assert.IsType<Invoices> (response);
        }

        /// <summary>
        /// Test GetInvoiceAsPdf
        /// </summary>
        [Fact]
        public void GetInvoiceAsPdfTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid invoiceID = null;
            //string contentType = null;
            //var response = instance.GetInvoiceAsPdfAsync(xeroTenantId, invoiceID, contentType);
            //Assert.IsType<System.IO.Stream> (response);
        }

        /// <summary>
        /// Test GetInvoiceAttachmentByFileName
        /// </summary>
        [Fact]
        public void GetInvoiceAttachmentByFileNameTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid invoiceID = null;
            //string fileName = null;
            //string contentType = null;
            //var response = instance.GetInvoiceAttachmentByFileNameAsync(xeroTenantId, invoiceID, fileName, contentType);
            //Assert.IsType<System.IO.Stream> (response);
        }

        /// <summary>
        /// Test GetInvoiceAttachmentById
        /// </summary>
        [Fact]
        public void GetInvoiceAttachmentByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid invoiceID = null;
            //Guid attachmentID = null;
            //string contentType = null;
            //var response = instance.GetInvoiceAttachmentByIdAsync(xeroTenantId, invoiceID, attachmentID, contentType);
            //Assert.IsType<System.IO.Stream> (response);
        }

        /// <summary>
        /// Test GetInvoiceAttachments
        /// </summary>
        [Fact]
        public void GetInvoiceAttachmentsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid invoiceID = null;
            //var response = instance.GetInvoiceAttachmentsAsync(xeroTenantId, invoiceID);
            //Assert.IsType<Attachments> (response);
        }

        /// <summary>
        /// Test GetInvoiceHistory
        /// </summary>
        [Fact]
        public void GetInvoiceHistoryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid invoiceID = null;
            //var response = instance.GetInvoiceHistoryAsync(xeroTenantId, invoiceID);
            //Assert.IsType<HistoryRecords> (response);
        }

        /// <summary>
        /// Test GetInvoiceReminders
        /// </summary>
        [Fact]
        public void GetInvoiceRemindersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //var response = instance.GetInvoiceRemindersAsync(xeroTenantId);
            //Assert.IsType<InvoiceReminders> (response);
        }

        /// <summary>
        /// Test GetInvoices
        /// </summary>
        [Fact]
        public void GetInvoicesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //DateTime? ifModifiedSince = null;
            //string where = null;
            //string order = null;
            //List<Guid> iDs = null;
            //List<string> invoiceNumbers = null;
            //List<Guid> contactIDs = null;
            //List<string> statuses = null;
            //int? page = null;
            //bool? includeArchived = null;
            //bool? createdByMyApp = null;
            //int? unitdp = null;
            //var response = instance.GetInvoicesAsync(xeroTenantId, ifModifiedSince, where, order, iDs, invoiceNumbers, contactIDs, statuses, page, includeArchived, createdByMyApp, unitdp);
            //Assert.IsType<Invoices> (response);
        }

        /// <summary>
        /// Test GetItem
        /// </summary>
        [Fact]
        public void GetItemTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid itemID = null;
            //var response = instance.GetItemAsync(xeroTenantId, itemID);
            //Assert.IsType<Items> (response);
        }

        /// <summary>
        /// Test GetItemHistory
        /// </summary>
        [Fact]
        public void GetItemHistoryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid itemID = null;
            //var response = instance.GetItemHistoryAsync(xeroTenantId, itemID);
            //Assert.IsType<HistoryRecords> (response);
        }

        /// <summary>
        /// Test GetItems
        /// </summary>
        [Fact]
        public void GetItemsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //DateTime? ifModifiedSince = null;
            //string where = null;
            //string order = null;
            //int? unitdp = null;
            //var response = instance.GetItemsAsync(xeroTenantId, ifModifiedSince, where, order, unitdp);
            //Assert.IsType<Items> (response);
        }

        /// <summary>
        /// Test GetJournal
        /// </summary>
        [Fact]
        public void GetJournalTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid journalID = null;
            //var response = instance.GetJournalAsync(xeroTenantId, journalID);
            //Assert.IsType<Journals> (response);
        }

        /// <summary>
        /// Test GetJournals
        /// </summary>
        [Fact]
        public void GetJournalsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //DateTime? ifModifiedSince = null;
            //int? offset = null;
            //bool? paymentsOnly = null;
            //var response = instance.GetJournalsAsync(xeroTenantId, ifModifiedSince, offset, paymentsOnly);
            //Assert.IsType<Journals> (response);
        }

        /// <summary>
        /// Test GetLinkedTransaction
        /// </summary>
        [Fact]
        public void GetLinkedTransactionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid linkedTransactionID = null;
            //var response = instance.GetLinkedTransactionAsync(xeroTenantId, linkedTransactionID);
            //Assert.IsType<LinkedTransactions> (response);
        }

        /// <summary>
        /// Test GetLinkedTransactions
        /// </summary>
        [Fact]
        public void GetLinkedTransactionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //int? page = null;
            //string linkedTransactionID = null;
            //string sourceTransactionID = null;
            //string contactID = null;
            //string status = null;
            //string targetTransactionID = null;
            //var response = instance.GetLinkedTransactionsAsync(xeroTenantId, page, linkedTransactionID, sourceTransactionID, contactID, status, targetTransactionID);
            //Assert.IsType<LinkedTransactions> (response);
        }

        /// <summary>
        /// Test GetManualJournal
        /// </summary>
        [Fact]
        public void GetManualJournalTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid manualJournalID = null;
            //var response = instance.GetManualJournalAsync(xeroTenantId, manualJournalID);
            //Assert.IsType<ManualJournals> (response);
        }

        /// <summary>
        /// Test GetManualJournalAttachmentByFileName
        /// </summary>
        [Fact]
        public void GetManualJournalAttachmentByFileNameTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid manualJournalID = null;
            //string fileName = null;
            //string contentType = null;
            //var response = instance.GetManualJournalAttachmentByFileNameAsync(xeroTenantId, manualJournalID, fileName, contentType);
            //Assert.IsType<System.IO.Stream> (response);
        }

        /// <summary>
        /// Test GetManualJournalAttachmentById
        /// </summary>
        [Fact]
        public void GetManualJournalAttachmentByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid manualJournalID = null;
            //Guid attachmentID = null;
            //string contentType = null;
            //var response = instance.GetManualJournalAttachmentByIdAsync(xeroTenantId, manualJournalID, attachmentID, contentType);
            //Assert.IsType<System.IO.Stream> (response);
        }

        /// <summary>
        /// Test GetManualJournalAttachments
        /// </summary>
        [Fact]
        public void GetManualJournalAttachmentsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid manualJournalID = null;
            //var response = instance.GetManualJournalAttachmentsAsync(xeroTenantId, manualJournalID);
            //Assert.IsType<Attachments> (response);
        }

        /// <summary>
        /// Test GetManualJournals
        /// </summary>
        [Fact]
        public void GetManualJournalsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //DateTime? ifModifiedSince = null;
            //string where = null;
            //string order = null;
            //int? page = null;
            //var response = instance.GetManualJournalsAsync(xeroTenantId, ifModifiedSince, where, order, page);
            //Assert.IsType<ManualJournals> (response);
        }

        /// <summary>
        /// Test GetOnlineInvoice
        /// </summary>
        [Fact]
        public void GetOnlineInvoiceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid invoiceID = null;
            //var response = instance.GetOnlineInvoiceAsync(xeroTenantId, invoiceID);
            //Assert.IsType<OnlineInvoices> (response);
        }

        /// <summary>
        /// Test GetOrganisationCISSettings
        /// </summary>
        [Fact]
        public void GetOrganisationCISSettingsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid organisationID = null;
            //var response = instance.GetOrganisationCISSettingsAsync(xeroTenantId, organisationID);
            //Assert.IsType<CISOrgSetting> (response);
        }

        /// <summary>
        /// Test GetOrganisations
        /// </summary>
        [Fact]
        public void GetOrganisationsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //var response = instance.GetOrganisationsAsync(xeroTenantId);
            //Assert.IsType<Organisations> (response);
        }

        /// <summary>
        /// Test GetOverpayment
        /// </summary>
        [Fact]
        public void GetOverpaymentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid overpaymentID = null;
            //var response = instance.GetOverpaymentAsync(xeroTenantId, overpaymentID);
            //Assert.IsType<Overpayments> (response);
        }

        /// <summary>
        /// Test GetOverpaymentHistory
        /// </summary>
        [Fact]
        public void GetOverpaymentHistoryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid overpaymentID = null;
            //var response = instance.GetOverpaymentHistoryAsync(xeroTenantId, overpaymentID);
            //Assert.IsType<HistoryRecords> (response);
        }

        /// <summary>
        /// Test GetOverpayments
        /// </summary>
        [Fact]
        public void GetOverpaymentsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //DateTime? ifModifiedSince = null;
            //string where = null;
            //string order = null;
            //int? page = null;
            //int? unitdp = null;
            //var response = instance.GetOverpaymentsAsync(xeroTenantId, ifModifiedSince, where, order, page, unitdp);
            //Assert.IsType<Overpayments> (response);
        }

        /// <summary>
        /// Test GetPayment
        /// </summary>
        [Fact]
        public void GetPaymentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid paymentID = null;
            //var response = instance.GetPaymentAsync(xeroTenantId, paymentID);
            //Assert.IsType<Payments> (response);
        }

        /// <summary>
        /// Test GetPaymentHistory
        /// </summary>
        [Fact]
        public void GetPaymentHistoryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid paymentID = null;
            //var response = instance.GetPaymentHistoryAsync(xeroTenantId, paymentID);
            //Assert.IsType<HistoryRecords> (response);
        }

        /// <summary>
        /// Test GetPaymentServices
        /// </summary>
        [Fact]
        public void GetPaymentServicesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //var response = instance.GetPaymentServicesAsync(xeroTenantId);
            //Assert.IsType<PaymentServices> (response);
        }

        /// <summary>
        /// Test GetPayments
        /// </summary>
        [Fact]
        public void GetPaymentsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //DateTime? ifModifiedSince = null;
            //string where = null;
            //string order = null;
            //var response = instance.GetPaymentsAsync(xeroTenantId, ifModifiedSince, where, order);
            //Assert.IsType<Payments> (response);
        }

        /// <summary>
        /// Test GetPrepayment
        /// </summary>
        [Fact]
        public void GetPrepaymentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid prepaymentID = null;
            //var response = instance.GetPrepaymentAsync(xeroTenantId, prepaymentID);
            //Assert.IsType<Prepayments> (response);
        }

        /// <summary>
        /// Test GetPrepaymentHistory
        /// </summary>
        [Fact]
        public void GetPrepaymentHistoryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid prepaymentID = null;
            //var response = instance.GetPrepaymentHistoryAsync(xeroTenantId, prepaymentID);
            //Assert.IsType<HistoryRecords> (response);
        }

        /// <summary>
        /// Test GetPrepayments
        /// </summary>
        [Fact]
        public void GetPrepaymentsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //DateTime? ifModifiedSince = null;
            //string where = null;
            //string order = null;
            //int? page = null;
            //int? unitdp = null;
            //var response = instance.GetPrepaymentsAsync(xeroTenantId, ifModifiedSince, where, order, page, unitdp);
            //Assert.IsType<Prepayments> (response);
        }

        /// <summary>
        /// Test GetPurchaseOrder
        /// </summary>
        [Fact]
        public void GetPurchaseOrderTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid purchaseOrderID = null;
            //var response = instance.GetPurchaseOrderAsync(xeroTenantId, purchaseOrderID);
            //Assert.IsType<PurchaseOrders> (response);
        }

        /// <summary>
        /// Test GetPurchaseOrderHistory
        /// </summary>
        [Fact]
        public void GetPurchaseOrderHistoryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid purchaseOrderID = null;
            //var response = instance.GetPurchaseOrderHistoryAsync(xeroTenantId, purchaseOrderID);
            //Assert.IsType<HistoryRecords> (response);
        }

        /// <summary>
        /// Test GetPurchaseOrders
        /// </summary>
        [Fact]
        public void GetPurchaseOrdersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //DateTime? ifModifiedSince = null;
            //string status = null;
            //string dateFrom = null;
            //string dateTo = null;
            //string order = null;
            //int? page = null;
            //var response = instance.GetPurchaseOrdersAsync(xeroTenantId, ifModifiedSince, status, dateFrom, dateTo, order, page);
            //Assert.IsType<PurchaseOrders> (response);
        }

        /// <summary>
        /// Test GetQuote
        /// </summary>
        [Fact]
        public void GetQuoteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid quoteID = null;
            //var response = instance.GetQuoteAsync(xeroTenantId, quoteID);
            //Assert.IsType<Quotes> (response);
        }

        /// <summary>
        /// Test GetQuotes
        /// </summary>
        [Fact]
        public void GetQuotesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //DateTime? ifModifiedSince = null;
            //DateTime? dateFrom = null;
            //DateTime? dateTo = null;
            //DateTime? expiryDateFrom = null;
            //DateTime? expiryDateTo = null;
            //Guid? contactID = null;
            //string status = null;
            //int? page = null;
            //string order = null;
            //var response = instance.GetQuotesAsync(xeroTenantId, ifModifiedSince, dateFrom, dateTo, expiryDateFrom, expiryDateTo, contactID, status, page, order);
            //Assert.IsType<Quotes> (response);
        }

        /// <summary>
        /// Test GetReceipt
        /// </summary>
        [Fact]
        public void GetReceiptTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid receiptID = null;
            //var response = instance.GetReceiptAsync(xeroTenantId, receiptID);
            //Assert.IsType<Receipts> (response);
        }

        /// <summary>
        /// Test GetReceiptAttachmentByFileName
        /// </summary>
        [Fact]
        public void GetReceiptAttachmentByFileNameTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid receiptID = null;
            //string fileName = null;
            //string contentType = null;
            //var response = instance.GetReceiptAttachmentByFileNameAsync(xeroTenantId, receiptID, fileName, contentType);
            //Assert.IsType<System.IO.Stream> (response);
        }

        /// <summary>
        /// Test GetReceiptAttachmentById
        /// </summary>
        [Fact]
        public void GetReceiptAttachmentByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid receiptID = null;
            //Guid attachmentID = null;
            //string contentType = null;
            //var response = instance.GetReceiptAttachmentByIdAsync(xeroTenantId, receiptID, attachmentID, contentType);
            //Assert.IsType<System.IO.Stream> (response);
        }

        /// <summary>
        /// Test GetReceiptAttachments
        /// </summary>
        [Fact]
        public void GetReceiptAttachmentsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid receiptID = null;
            //var response = instance.GetReceiptAttachmentsAsync(xeroTenantId, receiptID);
            //Assert.IsType<Attachments> (response);
        }

        /// <summary>
        /// Test GetReceiptHistory
        /// </summary>
        [Fact]
        public void GetReceiptHistoryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid receiptID = null;
            //var response = instance.GetReceiptHistoryAsync(xeroTenantId, receiptID);
            //Assert.IsType<HistoryRecords> (response);
        }

        /// <summary>
        /// Test GetReceipts
        /// </summary>
        [Fact]
        public void GetReceiptsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //DateTime? ifModifiedSince = null;
            //string where = null;
            //string order = null;
            //int? unitdp = null;
            //var response = instance.GetReceiptsAsync(xeroTenantId, ifModifiedSince, where, order, unitdp);
            //Assert.IsType<Receipts> (response);
        }

        /// <summary>
        /// Test GetRepeatingInvoice
        /// </summary>
        [Fact]
        public void GetRepeatingInvoiceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid repeatingInvoiceID = null;
            //var response = instance.GetRepeatingInvoiceAsync(xeroTenantId, repeatingInvoiceID);
            //Assert.IsType<RepeatingInvoices> (response);
        }

        /// <summary>
        /// Test GetRepeatingInvoiceAttachmentByFileName
        /// </summary>
        [Fact]
        public void GetRepeatingInvoiceAttachmentByFileNameTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid repeatingInvoiceID = null;
            //string fileName = null;
            //string contentType = null;
            //var response = instance.GetRepeatingInvoiceAttachmentByFileNameAsync(xeroTenantId, repeatingInvoiceID, fileName, contentType);
            //Assert.IsType<System.IO.Stream> (response);
        }

        /// <summary>
        /// Test GetRepeatingInvoiceAttachmentById
        /// </summary>
        [Fact]
        public void GetRepeatingInvoiceAttachmentByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid repeatingInvoiceID = null;
            //Guid attachmentID = null;
            //string contentType = null;
            //var response = instance.GetRepeatingInvoiceAttachmentByIdAsync(xeroTenantId, repeatingInvoiceID, attachmentID, contentType);
            //Assert.IsType<System.IO.Stream> (response);
        }

        /// <summary>
        /// Test GetRepeatingInvoiceAttachments
        /// </summary>
        [Fact]
        public void GetRepeatingInvoiceAttachmentsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid repeatingInvoiceID = null;
            //var response = instance.GetRepeatingInvoiceAttachmentsAsync(xeroTenantId, repeatingInvoiceID);
            //Assert.IsType<Attachments> (response);
        }

        /// <summary>
        /// Test GetRepeatingInvoiceHistory
        /// </summary>
        [Fact]
        public void GetRepeatingInvoiceHistoryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid repeatingInvoiceID = null;
            //var response = instance.GetRepeatingInvoiceHistoryAsync(xeroTenantId, repeatingInvoiceID);
            //Assert.IsType<HistoryRecords> (response);
        }

        /// <summary>
        /// Test GetRepeatingInvoices
        /// </summary>
        [Fact]
        public void GetRepeatingInvoicesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //string where = null;
            //string order = null;
            //var response = instance.GetRepeatingInvoicesAsync(xeroTenantId, where, order);
            //Assert.IsType<RepeatingInvoices> (response);
        }

        /// <summary>
        /// Test GetReportAgedPayablesByContact
        /// </summary>
        [Fact]
        public void GetReportAgedPayablesByContactTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid contactId = null;
            //DateTime? date = null;
            //DateTime? fromDate = null;
            //DateTime? toDate = null;
            //var response = instance.GetReportAgedPayablesByContactAsync(xeroTenantId, contactId, date, fromDate, toDate);
            //Assert.IsType<ReportWithRows> (response);
        }

        /// <summary>
        /// Test GetReportAgedReceivablesByContact
        /// </summary>
        [Fact]
        public void GetReportAgedReceivablesByContactTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid contactId = null;
            //DateTime? date = null;
            //DateTime? fromDate = null;
            //DateTime? toDate = null;
            //var response = instance.GetReportAgedReceivablesByContactAsync(xeroTenantId, contactId, date, fromDate, toDate);
            //Assert.IsType<ReportWithRows> (response);
        }

        /// <summary>
        /// Test GetReportBASorGST
        /// </summary>
        [Fact]
        public void GetReportBASorGSTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //string reportID = null;
            //var response = instance.GetReportBASorGSTAsync(xeroTenantId, reportID);
            //Assert.IsType<ReportWithRows> (response);
        }

        /// <summary>
        /// Test GetReportBASorGSTList
        /// </summary>
        [Fact]
        public void GetReportBASorGSTListTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //var response = instance.GetReportBASorGSTListAsync(xeroTenantId);
            //Assert.IsType<ReportWithRows> (response);
        }

        /// <summary>
        /// Test GetReportBalanceSheet
        /// </summary>
        [Fact]
        public void GetReportBalanceSheetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //string date = null;
            //int? periods = null;
            //string timeframe = null;
            //string trackingOptionID1 = null;
            //string trackingOptionID2 = null;
            //bool? standardLayout = null;
            //bool? paymentsOnly = null;
            //var response = instance.GetReportBalanceSheetAsync(xeroTenantId, date, periods, timeframe, trackingOptionID1, trackingOptionID2, standardLayout, paymentsOnly);
            //Assert.IsType<ReportWithRows> (response);
        }

        /// <summary>
        /// Test GetReportBankSummary
        /// </summary>
        [Fact]
        public void GetReportBankSummaryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //DateTime? date = null;
            //int? period = null;
            //int? timeframe = null;
            //var response = instance.GetReportBankSummaryAsync(xeroTenantId, date, period, timeframe);
            //Assert.IsType<ReportWithRows> (response);
        }

        /// <summary>
        /// Test GetReportBudgetSummary
        /// </summary>
        [Fact]
        public void GetReportBudgetSummaryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //DateTime? date = null;
            //int? period = null;
            //int? timeframe = null;
            //var response = instance.GetReportBudgetSummaryAsync(xeroTenantId, date, period, timeframe);
            //Assert.IsType<ReportWithRows> (response);
        }

        /// <summary>
        /// Test GetReportExecutiveSummary
        /// </summary>
        [Fact]
        public void GetReportExecutiveSummaryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //DateTime? date = null;
            //var response = instance.GetReportExecutiveSummaryAsync(xeroTenantId, date);
            //Assert.IsType<ReportWithRows> (response);
        }

        /// <summary>
        /// Test GetReportProfitAndLoss
        /// </summary>
        [Fact]
        public void GetReportProfitAndLossTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //DateTime? fromDate = null;
            //DateTime? toDate = null;
            //int? periods = null;
            //string timeframe = null;
            //string trackingCategoryID = null;
            //string trackingCategoryID2 = null;
            //string trackingOptionID = null;
            //string trackingOptionID2 = null;
            //bool? standardLayout = null;
            //bool? paymentsOnly = null;
            //var response = instance.GetReportProfitAndLossAsync(xeroTenantId, fromDate, toDate, periods, timeframe, trackingCategoryID, trackingCategoryID2, trackingOptionID, trackingOptionID2, standardLayout, paymentsOnly);
            //Assert.IsType<ReportWithRows> (response);
        }

        /// <summary>
        /// Test GetReportTenNinetyNine
        /// </summary>
        [Fact]
        public void GetReportTenNinetyNineTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //string reportYear = null;
            //var response = instance.GetReportTenNinetyNineAsync(xeroTenantId, reportYear);
            //Assert.IsType<Reports> (response);
        }

        /// <summary>
        /// Test GetReportTrialBalance
        /// </summary>
        [Fact]
        public void GetReportTrialBalanceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //DateTime? date = null;
            //bool? paymentsOnly = null;
            //var response = instance.GetReportTrialBalanceAsync(xeroTenantId, date, paymentsOnly);
            //Assert.IsType<ReportWithRows> (response);
        }

        /// <summary>
        /// Test GetTaxRates
        /// </summary>
        [Fact]
        public void GetTaxRatesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //string where = null;
            //string order = null;
            //string taxType = null;
            //var response = instance.GetTaxRatesAsync(xeroTenantId, where, order, taxType);
            //Assert.IsType<TaxRates> (response);
        }

        /// <summary>
        /// Test GetTrackingCategories
        /// </summary>
        [Fact]
        public void GetTrackingCategoriesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //string where = null;
            //string order = null;
            //bool? includeArchived = null;
            //var response = instance.GetTrackingCategoriesAsync(xeroTenantId, where, order, includeArchived);
            //Assert.IsType<TrackingCategories> (response);
        }

        /// <summary>
        /// Test GetTrackingCategory
        /// </summary>
        [Fact]
        public void GetTrackingCategoryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid trackingCategoryID = null;
            //var response = instance.GetTrackingCategoryAsync(xeroTenantId, trackingCategoryID);
            //Assert.IsType<TrackingCategories> (response);
        }

        /// <summary>
        /// Test GetUser
        /// </summary>
        [Fact]
        public void GetUserTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid userID = null;
            //var response = instance.GetUserAsync(xeroTenantId, userID);
            //Assert.IsType<Users> (response);
        }

        /// <summary>
        /// Test GetUsers
        /// </summary>
        [Fact]
        public void GetUsersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //DateTime? ifModifiedSince = null;
            //string where = null;
            //string order = null;
            //var response = instance.GetUsersAsync(xeroTenantId, ifModifiedSince, where, order);
            //Assert.IsType<Users> (response);
        }

        /// <summary>
        /// Test UpdateAccount
        /// </summary>
        [Fact]
        public void UpdateAccountTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid accountID = null;
            //Accounts accounts = null;
            //var response = instance.UpdateAccountAsync(xeroTenantId, accountID, accounts);
            //Assert.IsType<Accounts> (response);
        }

        /// <summary>
        /// Test UpdateAccountAttachmentByFileName
        /// </summary>
        [Fact]
        public void UpdateAccountAttachmentByFileNameTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid accountID = null;
            //string fileName = null;
            //byte[] body = null;
            //var response = instance.UpdateAccountAttachmentByFileNameAsync(xeroTenantId, accountID, fileName, body);
            //Assert.IsType<Attachments> (response);
        }

        /// <summary>
        /// Test UpdateBankTransaction
        /// </summary>
        [Fact]
        public void UpdateBankTransactionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid bankTransactionID = null;
            //BankTransactions bankTransactions = null;
            //var response = instance.UpdateBankTransactionAsync(xeroTenantId, bankTransactionID, bankTransactions);
            //Assert.IsType<BankTransactions> (response);
        }

        /// <summary>
        /// Test UpdateBankTransactionAttachmentByFileName
        /// </summary>
        [Fact]
        public void UpdateBankTransactionAttachmentByFileNameTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid bankTransactionID = null;
            //string fileName = null;
            //byte[] body = null;
            //var response = instance.UpdateBankTransactionAttachmentByFileNameAsync(xeroTenantId, bankTransactionID, fileName, body);
            //Assert.IsType<Attachments> (response);
        }

        /// <summary>
        /// Test UpdateBankTransferAttachmentByFileName
        /// </summary>
        [Fact]
        public void UpdateBankTransferAttachmentByFileNameTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid bankTransferID = null;
            //string fileName = null;
            //byte[] body = null;
            //var response = instance.UpdateBankTransferAttachmentByFileNameAsync(xeroTenantId, bankTransferID, fileName, body);
            //Assert.IsType<Attachments> (response);
        }

        /// <summary>
        /// Test UpdateContact
        /// </summary>
        [Fact]
        public void UpdateContactTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid contactID = null;
            //Contacts contacts = null;
            //var response = instance.UpdateContactAsync(xeroTenantId, contactID, contacts);
            //Assert.IsType<Contacts> (response);
        }

        /// <summary>
        /// Test UpdateContactAttachmentByFileName
        /// </summary>
        [Fact]
        public void UpdateContactAttachmentByFileNameTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid contactID = null;
            //string fileName = null;
            //byte[] body = null;
            //var response = instance.UpdateContactAttachmentByFileNameAsync(xeroTenantId, contactID, fileName, body);
            //Assert.IsType<Attachments> (response);
        }

        /// <summary>
        /// Test UpdateContactGroup
        /// </summary>
        [Fact]
        public void UpdateContactGroupTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid contactGroupID = null;
            //ContactGroups contactGroups = null;
            //var response = instance.UpdateContactGroupAsync(xeroTenantId, contactGroupID, contactGroups);
            //Assert.IsType<ContactGroups> (response);
        }

        /// <summary>
        /// Test UpdateCreditNote
        /// </summary>
        [Fact]
        public void UpdateCreditNoteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid creditNoteID = null;
            //CreditNotes creditNotes = null;
            //var response = instance.UpdateCreditNoteAsync(xeroTenantId, creditNoteID, creditNotes);
            //Assert.IsType<CreditNotes> (response);
        }

        /// <summary>
        /// Test UpdateCreditNoteAttachmentByFileName
        /// </summary>
        [Fact]
        public void UpdateCreditNoteAttachmentByFileNameTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid creditNoteID = null;
            //string fileName = null;
            //byte[] body = null;
            //var response = instance.UpdateCreditNoteAttachmentByFileNameAsync(xeroTenantId, creditNoteID, fileName, body);
            //Assert.IsType<Attachments> (response);
        }

        /// <summary>
        /// Test UpdateEmployee
        /// </summary>
        [Fact]
        public void UpdateEmployeeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid employeeID = null;
            //Employees employees = null;
            //var response = instance.UpdateEmployeeAsync(xeroTenantId, employeeID, employees);
            //Assert.IsType<Employees> (response);
        }

        /// <summary>
        /// Test UpdateExpenseClaim
        /// </summary>
        [Fact]
        public void UpdateExpenseClaimTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid expenseClaimID = null;
            //ExpenseClaims expenseClaims = null;
            //var response = instance.UpdateExpenseClaimAsync(xeroTenantId, expenseClaimID, expenseClaims);
            //Assert.IsType<ExpenseClaims> (response);
        }

        /// <summary>
        /// Test UpdateInvoice
        /// </summary>
        [Fact]
        public void UpdateInvoiceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid invoiceID = null;
            //Invoices invoices = null;
            //var response = instance.UpdateInvoiceAsync(xeroTenantId, invoiceID, invoices);
            //Assert.IsType<Invoices> (response);
        }

        /// <summary>
        /// Test UpdateInvoiceAttachmentByFileName
        /// </summary>
        [Fact]
        public void UpdateInvoiceAttachmentByFileNameTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid invoiceID = null;
            //string fileName = null;
            //byte[] body = null;
            //var response = instance.UpdateInvoiceAttachmentByFileNameAsync(xeroTenantId, invoiceID, fileName, body);
            //Assert.IsType<Attachments> (response);
        }

        /// <summary>
        /// Test UpdateItem
        /// </summary>
        [Fact]
        public void UpdateItemTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid itemID = null;
            //Items items = null;
            //var response = instance.UpdateItemAsync(xeroTenantId, itemID, items);
            //Assert.IsType<Items> (response);
        }

        /// <summary>
        /// Test UpdateLinkedTransaction
        /// </summary>
        [Fact]
        public void UpdateLinkedTransactionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid linkedTransactionID = null;
            //LinkedTransactions linkedTransactions = null;
            //var response = instance.UpdateLinkedTransactionAsync(xeroTenantId, linkedTransactionID, linkedTransactions);
            //Assert.IsType<LinkedTransactions> (response);
        }

        /// <summary>
        /// Test UpdateManualJournal
        /// </summary>
        [Fact]
        public void UpdateManualJournalTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid manualJournalID = null;
            //ManualJournals manualJournals = null;
            //var response = instance.UpdateManualJournalAsync(xeroTenantId, manualJournalID, manualJournals);
            //Assert.IsType<ManualJournals> (response);
        }

        /// <summary>
        /// Test UpdateManualJournalAttachmentByFileName
        /// </summary>
        [Fact]
        public void UpdateManualJournalAttachmentByFileNameTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid manualJournalID = null;
            //string fileName = null;
            //byte[] body = null;
            //var response = instance.UpdateManualJournalAttachmentByFileNameAsync(xeroTenantId, manualJournalID, fileName, body);
            //Assert.IsType<Attachments> (response);
        }

        /// <summary>
        /// Test UpdatePurchaseOrder
        /// </summary>
        [Fact]
        public void UpdatePurchaseOrderTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid purchaseOrderID = null;
            //PurchaseOrders purchaseOrders = null;
            //var response = instance.UpdatePurchaseOrderAsync(xeroTenantId, purchaseOrderID, purchaseOrders);
            //Assert.IsType<PurchaseOrders> (response);
        }

        /// <summary>
        /// Test UpdateReceipt
        /// </summary>
        [Fact]
        public void UpdateReceiptTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid receiptID = null;
            //Receipts receipts = null;
            //var response = instance.UpdateReceiptAsync(xeroTenantId, receiptID, receipts);
            //Assert.IsType<Receipts> (response);
        }

        /// <summary>
        /// Test UpdateReceiptAttachmentByFileName
        /// </summary>
        [Fact]
        public void UpdateReceiptAttachmentByFileNameTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid receiptID = null;
            //string fileName = null;
            //byte[] body = null;
            //var response = instance.UpdateReceiptAttachmentByFileNameAsync(xeroTenantId, receiptID, fileName, body);
            //Assert.IsType<Attachments> (response);
        }

        /// <summary>
        /// Test UpdateRepeatingInvoiceAttachmentByFileName
        /// </summary>
        [Fact]
        public void UpdateRepeatingInvoiceAttachmentByFileNameTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid repeatingInvoiceID = null;
            //string fileName = null;
            //byte[] body = null;
            //var response = instance.UpdateRepeatingInvoiceAttachmentByFileNameAsync(xeroTenantId, repeatingInvoiceID, fileName, body);
            //Assert.IsType<Attachments> (response);
        }

        /// <summary>
        /// Test UpdateTaxRate
        /// </summary>
        [Fact]
        public void UpdateTaxRateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //TaxRates taxRates = null;
            //var response = instance.UpdateTaxRateAsync(xeroTenantId, taxRates);
            //Assert.IsType<TaxRates> (response);
        }

        /// <summary>
        /// Test UpdateTrackingCategory
        /// </summary>
        [Fact]
        public void UpdateTrackingCategoryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid trackingCategoryID = null;
            //TrackingCategory trackingCategory = null;
            //var response = instance.UpdateTrackingCategoryAsync(xeroTenantId, trackingCategoryID, trackingCategory);
            //Assert.IsType<TrackingCategories> (response);
        }

        /// <summary>
        /// Test UpdateTrackingOptions
        /// </summary>
        [Fact]
        public void UpdateTrackingOptionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid trackingCategoryID = null;
            //Guid trackingOptionID = null;
            //TrackingOption trackingOption = null;
            //var response = instance.UpdateTrackingOptionsAsync(xeroTenantId, trackingCategoryID, trackingOptionID, trackingOption);
            //Assert.IsType<TrackingOptions> (response);
        }

    }

}
