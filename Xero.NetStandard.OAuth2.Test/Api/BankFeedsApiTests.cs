/* 
 * Bank Feeds API
 *
 * This specifing endpoints Xero Bank feeds API
 *
 * The version of the OpenAPI document: 2.6.1
 * Contact: api@xero.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using Xero.NetStandard.OAuth2.Client;
using Xero.NetStandard.OAuth2.Api;
using Xero.NetStandard.OAuth2.Model.Bankfeeds;

namespace Xero.NetStandard.OAuth2.Test.Api.Bankfeeds
{
    /// <summary>
    ///  Class for testing BankFeedsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class BankFeedsApiTests : IDisposable
    {
        private BankFeedsApi instance;

        public BankFeedsApiTests()
        {
            instance = new BankFeedsApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of BankFeedsApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' BankFeedsApi
            //Assert.IsType(typeof(BankFeedsApi), instance, "instance is a BankFeedsApi");
        }

        
        /// <summary>
        /// Test CreateFeedConnections
        /// </summary>
        [Fact]
        public void CreateFeedConnectionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //FeedConnections feedConnections = null;
            //var response = instance.CreateFeedConnectionsAsync(xeroTenantId, feedConnections);
            //Assert.IsType<FeedConnections> (response);
        }
        
        /// <summary>
        /// Test CreateStatements
        /// </summary>
        [Fact]
        public void CreateStatementsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Statements statements = null;
            //var response = instance.CreateStatementsAsync(xeroTenantId, statements);
            //Assert.IsType<Statements> (response);
        }
        
        /// <summary>
        /// Test DeleteFeedConnections
        /// </summary>
        [Fact]
        public void DeleteFeedConnectionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //FeedConnections feedConnections = null;
            //var response = instance.DeleteFeedConnectionsAsync(xeroTenantId, feedConnections);
            //Assert.IsType<FeedConnections> (response);
        }
        
        /// <summary>
        /// Test GetFeedConnection
        /// </summary>
        [Fact]
        public void GetFeedConnectionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid id = null;
            //var response = instance.GetFeedConnectionAsync(xeroTenantId, id);
            //Assert.IsType<FeedConnection> (response);
        }
        
        /// <summary>
        /// Test GetFeedConnections
        /// </summary>
        [Fact]
        public void GetFeedConnectionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //int? page = null;
            //int? pageSize = null;
            //var response = instance.GetFeedConnectionsAsync(xeroTenantId, page, pageSize);
            //Assert.IsType<FeedConnections> (response);
        }
        
        /// <summary>
        /// Test GetStatement
        /// </summary>
        [Fact]
        public void GetStatementTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid statementId = null;
            //var response = instance.GetStatementAsync(xeroTenantId, statementId);
            //Assert.IsType<Statement> (response);
        }
        
        /// <summary>
        /// Test GetStatements
        /// </summary>
        [Fact]
        public void GetStatementsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //int? page = null;
            //int? pageSize = null;
            //string xeroApplicationId = null;
            //string xeroUserId = null;
            //var response = instance.GetStatementsAsync(xeroTenantId, page, pageSize, xeroApplicationId, xeroUserId);
            //Assert.IsType<Statements> (response);
        }
        
    }

}
