/* 
 * Xero Payroll AU
 *
 * This is the Xero Payroll API for orgs in Australia region.
 *
 * The version of the OpenAPI document: 2.8.0
 * Contact: api@xero.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using Xunit;

using System;
using System.Linq;
using System.IO;
using System.Collections.Generic;
using Xero.NetStandard.OAuth2.Api;
using Xero.NetStandard.OAuth2.Model.PayrollAu;
using Xero.NetStandard.OAuth2.Client;
using System.Reflection;
using Newtonsoft.Json;
using RestSharp;

namespace Xero.NetStandard.OAuth2.Test.Model.PayrollAu
{
    /// <summary>
    ///  Class for testing BankAccount
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the model.
    /// </remarks>
    public class BankAccountTests : IDisposable
    {
        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        // /// <summary>
        // /// Test the property 'StatementText'
        // /// </summary>
        // [Fact]
        // public void StatementTextTest()
        // {
        //     // TODO unit test for the property 'StatementText'
        // }
        // /// <summary>
        // /// Test the property 'AccountName'
        // /// </summary>
        // [Fact]
        // public void AccountNameTest()
        // {
        //     // TODO unit test for the property 'AccountName'
        // }
        // /// <summary>
        // /// Test the property 'BSB'
        // /// </summary>
        // [Fact]
        // public void BSBTest()
        // {
        //     // TODO unit test for the property 'BSB'
        // }
        // /// <summary>
        // /// Test the property 'AccountNumber'
        // /// </summary>
        // [Fact]
        // public void AccountNumberTest()
        // {
        //     // TODO unit test for the property 'AccountNumber'
        // }

        /// <summary>
        /// Test the property 'Remainder'
        /// </summary>
        [Theory]
        [InlineData("true", true)]
        [InlineData("false", false)]
        [InlineData("null", null)]
        public void RemainderTest(string input, bool? expected)
        {
            var response = new RestResponse();
            response.Content = $@"{{
                ""Remainder"": {input}
            }}";

            var deserializer = new CustomJsonCodec(new Configuration());
            var actual = deserializer.Deserialize<BankAccount>(response);

            Assert.Equal(expected, actual.Remainder);
        }
        /// <summary>
        /// Test the property 'Amount'
        /// </summary>
        [Theory]
        [InlineData("20.00")]
        [InlineData("20")]
        public void AmountTest(string input)
        {
            var response = new RestResponse();
            response.Content = $@"{{
                ""Amount"": {input}
            }}";

            var deserializer = new CustomJsonCodec(new Configuration());
            var actual = deserializer.Deserialize<BankAccount>(response);

            Assert.Equal(20, actual.Amount);
        }

    }

}
