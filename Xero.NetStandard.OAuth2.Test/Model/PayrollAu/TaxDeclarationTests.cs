/* 
 * Xero Payroll AU
 *
 * This is the Xero Payroll API for orgs in Australia region.
 *
 * The version of the OpenAPI document: 2.8.0
 * Contact: api@xero.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using Xunit;

using System;
using System.Linq;
using System.IO;
using System.Collections.Generic;
using Xero.NetStandard.OAuth2.Api;
using Xero.NetStandard.OAuth2.Model.PayrollAu;
using Xero.NetStandard.OAuth2.Client;
using System.Reflection;
using Newtonsoft.Json;

namespace Xero.NetStandard.OAuth2.Test.Model.PayrollAu
{
    /// <summary>
    ///  Class for testing TaxDeclaration
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the model.
    /// </remarks>
    public class TaxDeclarationTests : IDisposable
    {
        // TODO uncomment below to declare an instance variable for TaxDeclaration
        //private TaxDeclaration instance;

        public TaxDeclarationTests()
        {
            // TODO uncomment below to create an instance of TaxDeclaration
            //instance = new TaxDeclaration();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of TaxDeclaration
        /// </summary>
        [Fact]
        public void TaxDeclarationInstanceTest()
        {
            // TODO uncomment below to test "IsInstanceOfType" TaxDeclaration
            //Assert.IsInstanceOfType<TaxDeclaration> (instance, "variable 'instance' is a TaxDeclaration");
        }


        /// <summary>
        /// Test the property 'EmployeeID'
        /// </summary>
        [Fact]
        public void EmployeeIDTest()
        {
            // TODO unit test for the property 'EmployeeID'
        }
        /// <summary>
        /// Test the property 'EmploymentBasis' deserialises from valid inputs
        /// </summary>
        [Theory]
        [InlineData("FULLTIME", EmploymentBasis.FULLTIME)]
        [InlineData("PARTTIME", EmploymentBasis.PARTTIME)]
        [InlineData("CASUAL", EmploymentBasis.CASUAL)]
        [InlineData("LABOURHIRE", EmploymentBasis.LABOURHIRE)]
        [InlineData("SUPERINCOMESTREAM", EmploymentBasis.SUPERINCOMESTREAM)]
        public void EmploymentBasis_ValidInputs_Deserialises(string input, EmploymentBasis expected)
        {
            JsonDoc.Assert<TaxDeclaration, EmploymentBasis>(
                input: new JsonDoc.String(nameof(TaxDeclaration.EmploymentBasis), input),
                toProperty: (t) => t.EmploymentBasis,
                shouldBe: expected
            );
        }
        /// <summary>
        /// Test the property 'EmploymentBasis' deserialises from null to 0
        /// </summary>
        [Fact]
        public void EmploymentBasis_NullInput_DeserialisesTo0()
        {
            JsonDoc.Assert<TaxDeclaration, EmploymentBasis>(
                input: new JsonDoc.Null(nameof(TaxDeclaration.EmploymentBasis)),
                toProperty: (t) => t.EmploymentBasis,
                shouldBe: 0
            );
        }
        /// <summary>
        /// Test the property 'EmploymentBasis' deserialises to 0 when not present
        /// </summary>
        [Fact]
        public void EmploymentBasis_NotPresentInInput_DeserialisesTo0()
        {
            JsonDoc.Assert<TaxDeclaration, EmploymentBasis>(
                input: new JsonDoc.NotPresent(nameof(TaxDeclaration.EmploymentBasis)),
                toProperty: (t) => t.EmploymentBasis,
                shouldBe: 0
            );
        }
        /// <summary>
        /// Test the property 'TFNExemptionType'
        /// </summary>
        [Fact]
        public void TFNExemptionTypeTest()
        {
            // TODO unit test for the property 'TFNExemptionType'
        }
        /// <summary>
        /// Test the property 'TaxFileNumber'
        /// </summary>
        [Fact]
        public void TaxFileNumberTest()
        {
            // TODO unit test for the property 'TaxFileNumber'
        }
        /// <summary>
        /// Test the property 'AustralianResidentForTaxPurposes'
        /// </summary>
        [Fact]
        public void AustralianResidentForTaxPurposesTest()
        {
            // TODO unit test for the property 'AustralianResidentForTaxPurposes'
        }
        /// <summary>
        /// Test the property 'ResidencyStatus'
        /// </summary>
        [Fact]
        public void ResidencyStatusTest()
        {
            // TODO unit test for the property 'ResidencyStatus'
        }
        /// <summary>
        /// Test the property 'TaxFreeThresholdClaimed'
        /// </summary>
        [Fact]
        public void TaxFreeThresholdClaimedTest()
        {
            // TODO unit test for the property 'TaxFreeThresholdClaimed'
        }
        /// <summary>
        /// Test the property 'TaxOffsetEstimatedAmount'
        /// </summary>
        [Fact]
        public void TaxOffsetEstimatedAmountTest()
        {
            // TODO unit test for the property 'TaxOffsetEstimatedAmount'
        }
        /// <summary>
        /// Test the property 'HasHELPDebt'
        /// </summary>
        [Fact]
        public void HasHELPDebtTest()
        {
            // TODO unit test for the property 'HasHELPDebt'
        }
        /// <summary>
        /// Test the property 'HasSFSSDebt'
        /// </summary>
        [Fact]
        public void HasSFSSDebtTest()
        {
            // TODO unit test for the property 'HasSFSSDebt'
        }
        /// <summary>
        /// Test the property 'HasTradeSupportLoanDebt'
        /// </summary>
        [Fact]
        public void HasTradeSupportLoanDebtTest()
        {
            // TODO unit test for the property 'HasTradeSupportLoanDebt'
        }
        /// <summary>
        /// Test the property 'UpwardVariationTaxWithholdingAmount'
        /// </summary>
        [Fact]
        public void UpwardVariationTaxWithholdingAmountTest()
        {
            // TODO unit test for the property 'UpwardVariationTaxWithholdingAmount'
        }
        /// <summary>
        /// Test the property 'EligibleToReceiveLeaveLoading'
        /// </summary>
        [Fact]
        public void EligibleToReceiveLeaveLoadingTest()
        {
            // TODO unit test for the property 'EligibleToReceiveLeaveLoading'
        }
        /// <summary>
        /// Test the property 'ApprovedWithholdingVariationPercentage'
        /// </summary>
        [Fact]
        public void ApprovedWithholdingVariationPercentageTest()
        {
            // TODO unit test for the property 'ApprovedWithholdingVariationPercentage'
        }
        /// <summary>
        /// Test the property 'HasStudentStartupLoan'
        /// </summary>
        [Fact]
        public void HasStudentStartupLoanTest()
        {
            // TODO unit test for the property 'HasStudentStartupLoan'
        }
        /// <summary>
        /// Test the property 'UpdatedDateUTC'
        /// </summary>
        [Fact]
        public void UpdatedDateUTCTest()
        {
            // TODO unit test for the property 'UpdatedDateUTC'
        }

    }

}
