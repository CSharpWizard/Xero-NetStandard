/* 
 * Xero Payroll AU
 *
 * This is the Xero Payroll API for orgs in Australia region.
 *
 * The version of the OpenAPI document: 2.8.0
 * Contact: api@xero.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using Xunit;

using System;
using System.Linq;
using System.IO;
using System.Collections.Generic;
using Xero.NetStandard.OAuth2.Api;
using Xero.NetStandard.OAuth2.Model.PayrollAu;
using Xero.NetStandard.OAuth2.Client;
using System.Reflection;
using Newtonsoft.Json;

namespace Xero.NetStandard.OAuth2.Test.Model.PayrollAu
{
    /// <summary>
    ///  Class for testing SuperannuationLine
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the model.
    /// </remarks>
    public class SuperannuationLineTests : IDisposable
    {
        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test the property 'ContributionType'
        /// </summary>
        [Theory]
        [InlineData("EMPLOYEE", SuperannuationContributionType.EMPLOYEE)]
        [InlineData("EMPLOYERADDITIONAL", SuperannuationContributionType.EMPLOYERADDITIONAL)]
        [InlineData("SALARYSACRIFICE", SuperannuationContributionType.SALARYSACRIFICE)]
        [InlineData("SGC", SuperannuationContributionType.SGC)]
        public void ContributionTypeTest(string input, SuperannuationContributionType expected)
        {
            JsonDoc.Assert<SuperannuationLine, SuperannuationContributionType>(
                input: new JsonDoc.String(nameof(SuperannuationLine.ContributionType), input),
                toProperty: x => x.ContributionType,
                shouldBe: expected
            );
        }
        /// <summary>
        /// Test the property 'CalculationType'
        /// </summary>
        [Theory]
        [InlineData("FIXEDAMOUNT", SuperannuationCalculationType.FIXEDAMOUNT)]
        [InlineData("PERCENTAGEOFEARNINGS", SuperannuationCalculationType.PERCENTAGEOFEARNINGS)]
        [InlineData("STATUTORY", SuperannuationCalculationType.STATUTORY)]
        public void CalculationTypeTest(string input, SuperannuationCalculationType expected)
        {
            JsonDoc.Assert<SuperannuationLine, SuperannuationCalculationType>(
                input: new JsonDoc.String(nameof(SuperannuationLine.CalculationType), input),
                toProperty: x => x.CalculationType,
                shouldBe: expected
            );
        }
        /// <summary>
        /// Test the property 'MinimumMonthlyEarnings'
        /// </summary>
        [Theory]
        [InlineData("20.00")]
        [InlineData("20")]
        public void MinimumMonthlyEarningsTest(string input)
        {
            JsonDoc.Assert<SuperannuationLine, decimal?>(
                input: new JsonDoc.Number(nameof(SuperannuationLine.MinimumMonthlyEarnings), input),
                toProperty: x => x.MinimumMonthlyEarnings,
                shouldBe: 20
            );
        }
        /// <summary>
        /// Test the property 'Percentage'
        /// </summary>
        [Theory]
        [InlineData("20.00")]
        [InlineData("20")]
        public void PercentageTest(string input)
        {
            JsonDoc.Assert<SuperannuationLine, decimal?>(
                input: new JsonDoc.Number(nameof(SuperannuationLine.Percentage), input),
                toProperty: x => x.Percentage,
                shouldBe: 20
            );
        }
        /// <summary>
        /// Test the property 'Amount'
        /// </summary>
        [Theory]
        [InlineData("20.00")]
        [InlineData("20")]
        public void AmountTest(string input)
        {
            JsonDoc.Assert<SuperannuationLine, decimal?>(
                input: new JsonDoc.Number(nameof(SuperannuationLine.Amount), input),
                toProperty: x => x.Amount,
                shouldBe: 20
            );
        }
    }
}
