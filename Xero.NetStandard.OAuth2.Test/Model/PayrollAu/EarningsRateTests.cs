/* 
 * Xero Payroll AU
 *
 * This is the Xero Payroll API for orgs in Australia region.
 *
 * The version of the OpenAPI document: 2.8.0
 * Contact: api@xero.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using Xunit;

using System;
using System.Linq;
using System.IO;
using System.Collections.Generic;
using Xero.NetStandard.OAuth2.Api;
using Xero.NetStandard.OAuth2.Model.PayrollAu;
using Xero.NetStandard.OAuth2.Client;
using System.Reflection;
using Newtonsoft.Json;

namespace Xero.NetStandard.OAuth2.Test.Model.PayrollAu
{
    /// <summary>
    ///  Class for testing EarningsRate
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the model.
    /// </remarks>
    public class EarningsRateTests : IDisposable
    {
        public EarningsRateTests()
        {
            // TODO uncomment below to create an instance of EarningsRate
            //instance = new EarningsRate();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test the property 'EarningsType'
        /// </summary>
        [Theory]
        [InlineData("ALLOWANCE", EarningsType.ALLOWANCE)]
        [InlineData("BONUSESANDCOMMISSIONS", EarningsType.BONUSESANDCOMMISSIONS)]
        [InlineData("EMPLOYMENTTERMINATIONPAYMENT", EarningsType.EMPLOYMENTTERMINATIONPAYMENT)]
        [InlineData("FIXED", EarningsType.FIXED)]
        [InlineData("LUMPSUMA", EarningsType.LUMPSUMA)]
        [InlineData("LUMPSUMB", EarningsType.LUMPSUMB)]
        [InlineData("LUMPSUMD", EarningsType.LUMPSUMD)]
        [InlineData("LUMPSUME", EarningsType.LUMPSUME)]
        [InlineData("ORDINARYTIMEEARNINGS", EarningsType.ORDINARYTIMEEARNINGS)]
        [InlineData("OVERTIMEEARNINGS", EarningsType.OVERTIMEEARNINGS)]
        public void EarningsTypeTest(string input, EarningsType expected)
        {
            JsonDoc.Assert<EarningsRate, EarningsType>(
                input: new JsonDoc.String(nameof(EarningsRate.EarningsType), input),
                toProperty: e => e.EarningsType,
                shouldBe: expected
            );
        }
        /// <summary>
        /// Test the property 'RateType'
        /// </summary>
        [Theory]
        [InlineData("FIXEDAMOUNT", RateType.FIXEDAMOUNT)]
        [InlineData("MULTIPLE", RateType.MULTIPLE)]
        [InlineData("RATEPERUNIT", RateType.RATEPERUNIT)]
        public void RateTypeTest(string input, RateType expected)
        {
            JsonDoc.Assert<EarningsRate, RateType>(
                input: new JsonDoc.String(nameof(EarningsRate.RateType), input),
                toProperty: e => e.RateType,
                shouldBe: expected
            );
        }
        /// <summary>
        /// Test the property 'Multiplier'
        /// </summary>
        [Theory]
        [InlineData("20.00")]
        [InlineData("20")]
        public void MultiplierTest(string input)
        {
            JsonDoc.Assert<EarningsRate, decimal?>(
                input: new JsonDoc.Number(nameof(EarningsRate.Multiplier), input),
                toProperty: x => x.Multiplier,
                shouldBe: 20
            );
        }
        /// <summary>
        /// Test the property 'Amount'
        /// </summary>
        [Theory]
        [InlineData("20.00")]
        [InlineData("20")]
        public void AmountTest(string input)
        {
            JsonDoc.Assert<EarningsRate, decimal?>(
                input: new JsonDoc.Number(nameof(EarningsRate.Amount), input),
                toProperty: x => x.Amount,
                shouldBe: 20
            );
        }
        /// <summary>
        /// Test the property 'EmploymentTerminationPaymentType'
        /// </summary>
        [Theory]
        [InlineData("O", EmploymentTerminationPaymentType.O)]
        [InlineData("R", EmploymentTerminationPaymentType.R)]
        public void EmploymentTerminationPaymentTypeTest(string input, EmploymentTerminationPaymentType expected)
        {
            JsonDoc.Assert<EarningsRate, EmploymentTerminationPaymentType>(
                input: new JsonDoc.String(nameof(EarningsRate.EmploymentTerminationPaymentType), input),
                toProperty: x => x.EmploymentTerminationPaymentType,
                shouldBe: expected
            );
        }
        /// <summary>
        /// Test the property 'AllowanceType'
        /// </summary>
        [Theory]
        [InlineData("CAR", AllowanceType.CAR)]
        [InlineData("JOBKEEPER", AllowanceType.JOBKEEPER)]
        [InlineData("LAUNDRY", AllowanceType.LAUNDRY)]
        [InlineData("MEALS", AllowanceType.MEALS)]
        [InlineData("OTHER", AllowanceType.OTHER)]
        [InlineData("TRANSPORT", AllowanceType.TRANSPORT)]
        [InlineData("TRAVEL", AllowanceType.TRAVEL)]
        public void AllowanceTypeTest(string input, AllowanceType expected)
        {
            JsonDoc.Assert<EarningsRate, AllowanceType>(
                input: new JsonDoc.String(nameof(EarningsRate.AllowanceType), input),
                toProperty: x => x.AllowanceType,
                shouldBe: expected
            );
        }
    }
}
