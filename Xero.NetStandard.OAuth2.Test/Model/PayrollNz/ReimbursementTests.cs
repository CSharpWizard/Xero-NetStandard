/* 
 * Xero Payroll NZ
 *
 * This is the Xero Payroll API for orgs in the NZ region.
 *
 * The version of the OpenAPI document: 2.7.0
 * Contact: api@xero.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using Xunit;

using System;
using System.Linq;
using System.IO;
using System.Collections.Generic;
using Xero.NetStandard.OAuth2.Api;
using Xero.NetStandard.OAuth2.Model.PayrollNz;
using Xero.NetStandard.OAuth2.Client;
using System.Reflection;
using Newtonsoft.Json;
using RestSharp;

namespace Xero.NetStandard.OAuth2.Test.Model.PayrollNz
{
    /// <summary>
    ///  Class for testing Reimbursement
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the model.
    /// </remarks>
    public class ReimbursementTests : IDisposable
    {
        // TODO uncomment below to declare an instance variable for Reimbursement
        //private Reimbursement instance;

        public ReimbursementTests()
        {
            // TODO uncomment below to create an instance of Reimbursement
            //instance = new Reimbursement();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of Reimbursement
        /// </summary>
        [Fact]
        public void ReimbursementInstanceTest()
        {
            // TODO uncomment below to test "IsInstanceOfType" Reimbursement
            //Assert.IsInstanceOfType<Reimbursement> (instance, "variable 'instance' is a Reimbursement");
        }


        /// <summary>
        /// Test the property 'ReimbursementID'
        /// </summary>
        [Fact]
        public void ReimbursementIDTest()
        {
            // TODO unit test for the property 'ReimbursementID'
        }
        /// <summary>
        /// Test the property 'Name'
        /// </summary>
        [Fact]
        public void NameTest()
        {
            // TODO unit test for the property 'Name'
        }
        /// <summary>
        /// Test the property 'AccountID'
        /// </summary>
        [Fact]
        public void AccountIDTest()
        {
            // TODO unit test for the property 'AccountID'
        }
        /// <summary>
        /// Test the property 'CurrentRecord'
        /// </summary>
        [Fact]
        public void CurrentRecordTest()
        {
            // TODO unit test for the property 'CurrentRecord'
        }
        /// <summary>
        /// Test the property 'ReimbursementCategory'
        /// </summary>
        [Theory]
        [InlineData("GST", Reimbursement.ReimbursementCategoryEnum.GST)]
        [InlineData("GSTInclusive", Reimbursement.ReimbursementCategoryEnum.GSTInclusive)]
        [InlineData("NoGST", Reimbursement.ReimbursementCategoryEnum.NoGST)]
        public void ReimbursementCategoryEnum_ValidInput_Deserialises(string input, Reimbursement.ReimbursementCategoryEnum expected)
        {
            var response = new RestResponse();
            response.Content = $@"""{input}""";

            var deserializer = new CustomJsonCodec(new Configuration());
            var actual = deserializer.Deserialize<Reimbursement.ReimbursementCategoryEnum>(response);

            Assert.Equal(expected, actual);
        }

        [Fact]
        public void ReimbursementCategoryEnum_NullInput_Deserialises(){
            var response = new RestResponse();
            response.Content = "null";

            var deserializer = new CustomJsonCodec(new Configuration());
            var actual = deserializer.Deserialize<Reimbursement.ReimbursementCategoryEnum>(response);

            Assert.Equal(0, (int)actual);
        }
        /// <summary>
        /// Test the property 'CalculationType'
        /// </summary>
        [Theory]
        [InlineData("FixedAmount", Reimbursement.CalculationTypeEnum.FixedAmount)]
        [InlineData("RatePerUnit", Reimbursement.CalculationTypeEnum.RatePerUnit)]
        [InlineData("Unknown", Reimbursement.CalculationTypeEnum.Unknown)]
        public void CalculationTypeEnum_ValidInput_Deserialises(string input, Reimbursement.CalculationTypeEnum expected)
        {
            var response = new RestResponse();
            response.Content = $@"""{input}""";

            var deserializer = new CustomJsonCodec(new Configuration());
            var actual = deserializer.Deserialize<Reimbursement.CalculationTypeEnum>(response);

            Assert.Equal(expected, actual);        
        }

        [Fact]
        public void CalculationTypeEnum_NullInput_Deserialises(){
            var response = new RestResponse();
            response.Content = "null";

            var deserializer = new CustomJsonCodec(new Configuration());
            var actual = deserializer.Deserialize<Reimbursement.CalculationTypeEnum>(response);

            Assert.Equal(0, (int)actual);
        }
        /// <summary>
        /// Test the property 'StandardAmount'
        /// </summary>
        [Fact]
        public void StandardAmountTest()
        {
            // TODO unit test for the property 'StandardAmount'
        }
        /// <summary>
        /// Test the property 'StandardTypeOfUnits'
        /// </summary>
        [Theory]
        [InlineData("Hours", Reimbursement.StandardTypeOfUnitsEnum.Hours)]
        [InlineData("Km", Reimbursement.StandardTypeOfUnitsEnum.Km)]
        public void StandardTypeOfUnitsEnum_ValidInput_Deserialises(string input, Reimbursement.StandardTypeOfUnitsEnum expected)
        {
            var response = new RestResponse();
            response.Content = $@"""{input}""";

            var deserializer = new CustomJsonCodec(new Configuration());
            var actual = deserializer.Deserialize<Reimbursement.StandardTypeOfUnitsEnum>(response);

            Assert.Equal(expected, actual);
        }

        [Fact]
        public void StandardTypeOfUnitsEnum_NullInput_Deserialises(){
            var response = new RestResponse();
            response.Content = "null";

            var deserializer = new CustomJsonCodec(new Configuration());
            var actual = deserializer.Deserialize<Reimbursement.StandardTypeOfUnitsEnum>(response);

            Assert.Equal(0, (int)actual);
        }
        /// <summary>
        /// Test the property 'StandardRatePerUnit'
        /// </summary>
        [Fact]
        public void StandardRatePerUnitTest()
        {
            // TODO unit test for the property 'StandardRatePerUnit'
        }

    }

}
